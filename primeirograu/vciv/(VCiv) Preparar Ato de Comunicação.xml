<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(VCiv) Preparar Ato de Comunicação">
    <description><![CDATA[Fluxo destinado a permitir a realização de atos de comunicação, tais como citações, intimações, etc..]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="(VCiv) Separação em Preparar Ato de Comunicação" name="(VCiv) Separação em Preparar Ato de Comunicação"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
        <task name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" swimlane="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" priority="3"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Preparar citação e(ou) intimação" name="(VCiv) Preparar citação e(ou) intimação"/>
        <transition to="(VCiv) Preparar expedientes para o DJE" name="(VCiv) Preparar expedientes para o DJE"/>
        <transition to="(VCiv) Preparar relação para o DJE" name="(VCiv) Preparar relação para o DJE"/>
        <transition to="(VCiv) Aguardando publicação no DJE" name="(VCiv) Aguardando publicação no DJE"/>
        <transition to="(VCiv) Expedir Mandado" name="(VCiv) Expedir Mandado"/>
        <transition to="(VCiv) Selecionar Central de Mandados" name="(VCiv) Selecionar Central de Mandados"/>
        <transition to="(VCiv) Expedir Carta Precatória" name="(VCiv) Expedir Carta Precatória"/>
        <transition to="(VCiv) Encaminhar Carta Precatória" name="(VCiv) Encaminhar Carta Precatória"/>
        <transition to="(VCiv) Imprimir citação e(ou) intimação" name="(VCiv) Imprimir citação e(ou) intimação"/>
        <transition to="(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo" name="(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo"/>
        <transition to="(VCiv) Preparar intimação ao Ministério Público" name="(VCiv) Preparar intimação ao Ministério Público"/>
        <transition to="(VCiv) Aguardando manifestação do Ministério Público" name="(VCiv) Aguardando manifestação do Ministério Público"/>
        <transition to="(VCiv) Encaminhar Carta Rogatória" name="(VCiv) Encaminhar Carta Rogatória"/>
        <transition to="(VCiv) Expedir Carta Rogatória" name="(VCiv) Expedir Carta Rogatória"/>
        <transition to="(VCiv) Publicar no DJEN" name="(VCiv) Publicar no DJEN"/>
        <transition to="(VCiv) Confirmar conteúdo DJe" name="(VCiv) Confirmar conteúdo DJe"/>
        <transition to="(VCiv) Ignorar conteúdo DJe" name="(VCiv) Ignorar conteúdo DJe"/>
        <transition to="(VCiv) Preparar intimação de reativação" name="(VCiv) Preparar intimação de reativação"/>
        <transition to="(VCiv) Assinar mandado pelo chefe de secretaria" name="(VCiv) Assinar mandado pelo chefe de secretaria"/>
        <transition to="(VCiv) Assinar mandado pelo magistrado" name="(VCiv) Assinar mandado pelo magistrado"/>
        <transition to="(VCiv) Assinar Carta Precatória" name="(VCiv) Assinar Carta Precatória"/>
        <transition to="(VCiv) Assinar Carta Rogatória" name="(VCiv) Assinar Carta Rogatória"/>
        <transition to="(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria" name="(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria"/>
        <transition to="(VCiv) Assinar Citação e(ou) intimação pelo magistrado" name="(VCiv) Assinar Citação e(ou) intimação pelo magistrado"/>
        <transition to="(VCiv) Informar conteúdo DJe" name="(VCiv) Informar conteúdo DJe"/>
        <transition to="(VCiv) Publicar no DJEN" name="(VCiv) Publicar no DJEN"/>
    </task-node>
    <fork name="(VCiv) Separação em Preparar Ato de Comunicação">
        <transition to="(VCiv) É citação e(ou) intimação?" name="(VCiv) É citação e(ou) intimação?"/>
        <transition to="(VCiv) É DJE?" name="(VCiv) É DJE?"/>
        <transition to="(VCiv) É Mandado?" name="(VCiv) É Mandado?"/>
        <transition to="(VCiv) É carta precatória?" name="(VCiv) É carta precatória?"/>
        <transition to="(VCiv) É intimação ao Ministério Público?" name="(VCiv) É intimação ao Ministério Público?"/>
        <transition to="(VCiv) É carta rogatória?" name="(VCiv) É carta rogatória?"/>
        <transition to="(VCiv) É citação e(ou) intimação de reativação?" name="(VCiv) É citação e(ou) intimação de reativação?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:pac:intimar_mp', 'false')}"/>
        </event>
    </fork>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje') ? '(VCiv) Publicar no DJEN' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É DJE?">
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
        <transition to="(VCiv) Publicar no DJEN" name="(VCiv) Publicar no DJEN"/>
    </decision>
    <join name="(VCiv) Junção em Preparar Ato de Comunicação">
        <transition to="(VCiv) Apagar variáveis do fluxo" name="Término"/>
    </join>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:citar_intimar') ? '(VCiv) Preparar citação e(ou) intimação' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É citação e(ou) intimação?">
        <transition to="(VCiv) Preparar citação e(ou) intimação" name="(VCiv) Preparar citação e(ou) intimação"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Preparar citação e(ou) intimação">
        <task name="(VCiv) Preparar citação e(ou) intimação" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Ignorar citação e(ou) intimação"/>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Encaminhar para assinatura de citação e(ou) intimação?" name="Encaminhar para assinatura do chefe de secretaria">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(VCiv) Preparar citação e(ou) intimação')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria')}"/>
        </transition>
        <transition to="(VCiv) Encaminhar para assinatura de citação e(ou) intimação?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(VCiv) Preparar citação e(ou) intimação')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(VCiv) Assinar Citação e(ou) intimação pelo magistrado')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCitInt', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CitIntValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Separação em citação e(ou) intimação')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria">
        <task name="(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria" swimlane="Secretaria" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Preparar citação e(ou) intimação" name="Retornar para expedição de citação e(ou) intimação"/>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Encaminhar para assinatura de citação e(ou) intimação?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(VCiv) Assinar Citação e(ou) intimação pelo magistrado')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCitInt', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CitIntValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Separação em citação e(ou) intimação')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar Citação e(ou) intimação pelo magistrado">
        <task name="(VCiv) Assinar Citação e(ou) intimação pelo magistrado" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Preparar citação e(ou) intimação" name="Retornar para expedição de citação e (ou) intimação"/>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCitInt', org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Separação em citação e(ou) intimação')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:CitIntValidaParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxCitInt') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntCitInt') }" name="(VCiv) Encaminhar para assinatura de citação e(ou) intimação?">
        <transition to="(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria" name="(VCiv) Assinar Citação e(ou) intimação pelo chefe de secretaria"/>
        <transition to="(VCiv) Preparar citação e(ou) intimação" name="(VCiv) Preparar citação e(ou) intimação"/>
        <transition to="(VCiv) Deslocar OJ origem citacao" name="(VCiv) Assinar Citação e(ou) intimação pelo magistrado"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CitIntValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntCitInt')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxCitInt')}"/>
        </event>
    </decision>
    <decision expression="#{processoTrfHome.possuiCompetencia(2) || processoTrfHome.possuiCompetencia(10) || processoTrfHome.possuiCompetencia(27) || processoTrfHome.possuiCompetencia(42) || processoTrfHome.possuiCompetencia(43) || processoTrfHome.possuiCompetencia(71) || processoTrfHome.possuiCompetencia(76) || processoTrfHome.possuiCompetencia(106) || processoTrfHome.possuiCompetencia(107) ? '(VCiv) Controlar prazos via sistema' : '(VCiv) Publicar no DJEN 2'}" name="(VCiv) É competência dos Juizados?">
        <transition to="(VCiv) Controlar prazos via sistema" name="(VCiv) Controlar prazos via sistema"/>
        <transition to="(VCiv) Publicar no DJEN 2" name="(VCiv) Publicar no DJEN 2"/>
    </decision>
    <process-state name="(VCiv) Publicar no DJEN">
        <sub-process name="(VCiv) Publicação no DJEN" binding="late"/>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação"/>
    </process-state>
    <process-state name="(VCiv) Publicar no DJEN 2">
        <sub-process name="(VCiv) Publicação no DJEN" binding="late"/>
        <transition to="(VCiv) Controlar prazos via sistema" name="(VCiv) Controlar prazos via sistema"/>
    </process-state>
    <task-node end-tasks="true" name="(VCiv) Informar conteúdo DJe">
        <task name="(VCiv) Informar conteúdo DJe" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
                <variable name="Aviso2" mapped-name="textAlert:Aviso2" access="read,write"/>
                <variable name="Aviso3" mapped-name="textAlert:Aviso3" access="read,write"/>
                <variable name="vciv_label_magistrado_dje" mapped-name="textAlert:vciv_label_magistrado_dje" access="read,write"/>
                <variable name="vciv_magistrado_dje" mapped-name="combo_objetos:vciv_magistrado_dje" access="read,write"/>
                <variable name="vciv_conteudo_dje" mapped-name="text:vciv_conteudo_dje" access="read,write"/>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Preencheu conteúdo DJe?" name="Prosseguir"/>
        <transition to="(VCiv) Ignorar conteúdo DJe" name="Cancelar e sair da tarefa"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('magistrado_dje_temp', tramitacaoProcessualService.recuperaVariavelTarefa('combo_objetos:vciv_magistrado_dje').getIdUsuario())}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('combo_objetos:vciv_magistrado_dje')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('conteudo_dje_temp', tramitacaoProcessualService.strToBase64(tramitacaoProcessualService.recuperaVariavelTarefa('text:vciv_conteudo_dje')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('text:vciv_conteudo_dje')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv_conteudo_dje')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Ignorar conteúdo DJe">
        <task name="(VCiv) Ignorar conteúdo DJe" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Aviso_DJe" mapped-name="textAlert:Aviso_DJe" access="read,write"/>
            </controller>
        </task>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="Sim"/>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Informar conteúdo DJe" name="Não"/>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('magistrado_dje_temp') == null || tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp') == &quot;&quot; ? '(VCiv) Informar conteúdo DJe' : '(VCiv) Confirmar conteúdo DJe'}" name="(VCiv) Preencheu conteúdo DJe?">
        <transition to="(VCiv) Informar conteúdo DJe" name="(VCiv) Informar conteúdo DJe"/>
        <transition to="(VCiv) Confirmar conteúdo DJe" name="(VCiv) Confirmar conteúdo DJe"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Confirmar conteúdo DJe">
        <task name="(VCiv) Confirmar conteúdo DJe" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Aviso4" mapped-name="textAlert:Aviso4" access="read,write"/>
                <variable name="Aviso5" mapped-name="textAlert:Aviso5" access="read,write"/>
                <variable name="Aviso6" mapped-name="textAlert:Aviso6" access="read,write"/>
                <variable name="Aviso7" mapped-name="textAlert:Aviso7" access="read,write"/>
                <variable name="visualizar_dje" mapped-name="textAlert:visualizar_dje" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Informar conteúdo DJe" name="Retornar para ajustar conteúdo"/>
        <transition to="(VCiv) Gravar Variáveis DJe" name="Enviar para publicação no DJe"/>
    </task-node>
    <node name="(VCiv) Gravar Variáveis DJe">
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('conteudo_dje_direto', tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp')) : tramitacaoProcessualService.gravaVariavel('conteudo_dje', tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp')) }"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('magistrado_dje', tramitacaoProcessualService.recuperaVariavel('magistrado_dje_temp'))}"/>
            <action expression="#{preencherMovimento.deCodigo(1061).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('data_dje_direto', dateUtil.getDataAtual('yyyy-MM-dd')) : tramitacaoProcessualService.gravaVariavel('data_dje', dateUtil.getDataAtual('yyyy-MM-dd'))}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('id_oj_dje_direto', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador) : tramitacaoProcessualService.gravaVariavel('id_oj_dje', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(VCiv) Preparar expedientes para o DJE">
        <task name="(VCiv) Preparar expedientes para o DJE" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Preparar relação para o DJE" name="(VCiv) Preparar relação para o DJE">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Ignorar preparação de expedientes para o DJE"/>
        <event type="task-start">
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('P')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Preparar relação para o DJE')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Preparar relação para o DJE">
        <task name="(VCiv) Preparar relação para o DJE" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="movimentaoEmLote" mapped-name="movimentarLote:movimentaoEmLote" access="read,write"/>
                <variable name="Processo_Fluxo_expedientes_diario" mapped-name="frame:Processo_Fluxo_expedientes_diario" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Aguardando publicação no DJE" name="Aguardar publicação no DJE"/>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Aguardando publicação no DJE">
        <task name="(VCiv) Aguardando publicação no DJE" swimlane="Secretaria" priority="3"/>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Prosseguir"/>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:expedir_mandado') ? '(VCiv) Expedir Mandado' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É Mandado?">
        <transition to="(VCiv) Expedir Mandado" name="(VCiv) Expedir Mandado"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Expedir Mandado">
        <task name="(VCiv) Expedir Mandado" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
                <variable name="Aviso2" mapped-name="textAlert:Aviso2" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variaveis*

1.Variavel:Processo_Fluxo_prepararExpediente;
  Label: 'Preparação de mandado'
  Escrita: true;
  Obrig: false;
  Tipo: Frame;

2.Variavel:Aviso1;
  Label: 'Caso deseje encaminhar o expediente para uma tarefa específica de assinatura listadas abaixo, é essencial que todos as abas (Escolha dos destinatários, Preparar ato, Escolher documentos vinculados e finalizar) sejam preenchidas.'
  Escrita: true;
  Obrig: false;
  Tipo: Aviso;

3.Variavel:Aviso2;
  Label: 'Após assinar o mandado, o usuário deve, em ato contínuo, escolher a central de cumprimento do mandado.'
  Escrita: true;
  Obrig: false;
  Tipo: Aviso;]]></description>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Existe alguma Central de Mandados?" name="(VCiv) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Ignorar expedição de Mandado"/>
        <transition to="(VCiv) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do chefe de secretaria">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntMand', '(VCiv) Expedir Mandado')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxMand', '(VCiv) Assinar mandado pelo chefe de secretaria')}"/>
        </transition>
        <transition to="(VCiv) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntMand', '(VCiv) Expedir Mandado')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxMand', '(VCiv) Deslocar OJ origem mandado')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:MandValidoParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Existe alguma Central de Mandados?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170,229')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar mandado pelo chefe de secretaria">
        <task name="(VCiv) Assinar mandado pelo chefe de secretaria" swimlane="Secretaria" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variaveis*

1. Variavel: Processo_Fluxo_prepararExpediente;
   Label:  'Preparação de mandado';
   Escrita: true;
   Obrigatório: false;
   Tipo: Frame;

2. Variavel: Aviso1;
   Label:  'Após assinar o mandado, o usuário deve, em ato contínuo, escolher a central de cumprimento do mandado.';
   Escrita: true;
   Obrigatório: false;
   Tipo: Aviso;]]></description>
        <transition to="(VCiv) Existe alguma Central de Mandados?" name="(VCiv) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Expedir Mandado" name="Retornar para expedição de mandado"/>
        <transition to="(VCiv) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntMand', '(VCiv) Assinar mandado pelo chefe de secretaria')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxMand', '(VCiv) Assinar mandado pelo magistrado')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand',org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:MandValidoParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Existe alguma Central de Mandados?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar mandado pelo magistrado">
        <task name="(VCiv) Assinar mandado pelo magistrado" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variaveis*

1. Variavel: Processo_Fluxo_prepararExpediente;
   Label:  'Preparação de mandado';
   Escrita: true;
   Obrigatório: false;
   Tipo: Frame;

2. Variavel: Aviso1;
   Label:  'Após assinar o mandado, o usuário deve, em ato contínuo, escolher a central de cumprimento do mandado.';
   Escrita: true;
   Obrigatório: false;
   Tipo: Aviso;]]></description>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Expedir Mandado" name="Retonar para expedição de mandado"/>
        <transition to="(VCiv) Existe alguma Central de Mandados?" name="(VCiv) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Existe alguma Central de Mandados?')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand',org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Deslocar secretaria unificada assinatura mandado')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:MandValidoParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxMand') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntMand') }" name="(VCiv) Encaminhar para assinatura de mandado?">
        <transition to="(VCiv) Assinar mandado pelo chefe de secretaria" name="(VCiv) Assinar mandado pelo chefe de secretaria"/>
        <transition to="(VCiv) Assinar mandado pelo magistrado" name="(VCiv) Assinar mandado pelo magistrado"/>
        <transition to="(VCiv) Expedir Mandado" name="(VCiv) Expedir Mandado"/>
        <transition to="(VCiv) Deslocar OJ origem mandado" name="(VCiv) Deslocar OJ origem mandado"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:MandValidoParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntMand')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxMand')}"/>
        </event>
    </decision>
    <decision expression="#{conectorMandados.haVariasCentraisMandado() ? '(VCiv) Selecionar Central de Mandados' : '(VCiv) Lançar movimento de Expedição de Mandado'}" name="(VCiv) Existe alguma Central de Mandados?">
        <transition to="(VCiv) Selecionar Central de Mandados" name="(VCiv) Selecionar Central de Mandados"/>
        <transition to="(VCiv) Lançar movimento de Expedição de Mandado" name="(VCiv) Lançar movimento de Expedição de Mandado"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Selecionar Central de Mandados">
        <task name="(VCiv) Selecionar Central de Mandados" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_expedientes_centralmandados" mapped-name="frame:Processo_Fluxo_expedientes_centralmandados" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Lançar movimento de Expedição de Mandado" name="Finalizar e prosseguir"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Lançar movimento de Expedição de Mandado')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <node name="(VCiv) Lançar movimento de Expedição de Mandado">
        <transition to="(VCiv) Controlar prazos via mandado" name="(VCiv) Controlar prazos via mandado"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('M', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(78).lancarMovimento()}')}"/>
        </event>
    </node>
    <process-state name="(VCiv) Controlar prazos via mandado">
        <sub-process name="(VCiv) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(VCiv) Apagar variáveis do fluxo" name="(VCiv) Apagar variáveis do fluxo"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv:cpre:mandado')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:cpre:mandado','true')}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:expedir_carta_precatoria') ? '(VCiv) Expedir Carta Precatória' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É carta precatória?">
        <transition to="(VCiv) Expedir Carta Precatória" name="(VCiv) Expedir Carta Precatória"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Expedir Carta Precatória">
        <task name="(VCiv) Expedir Carta Precatória" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Lançar movimento de Expedição de Carta Precatória" name="(VCiv) Lançar movimento de Expedição de Carta Precatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <transition to="(VCiv) Encaminhar para assinatura de carta precatória?" name="Encaminhar para assinatura">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCartaPrec', '(VCiv) Expedir Carta Precatória')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCartaPrec', '(VCiv) Deslocar OJ origem carta precatoria')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCartaPrec', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CartaPrecValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Lançar movimento de Expedição de Carta Precatória')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('L')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCartaPrec')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar Carta Precatória">
        <task name="(VCiv) Assinar Carta Precatória" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Lançar movimento de Expedição de Carta Precatória" name="(VCiv) Lançar movimento de Expedição de Carta Precatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Expedir Carta Precatória" name="Retornar para expedição de carta precatória"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCartaPrec', org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Lançar movimento de Expedição de Carta Precatória')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('L')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaPrec')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCartaPrec')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:CartaPrecValidaParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxCartaPrec') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntCartaPrec') }" name="(VCiv) Encaminhar para assinatura de carta precatória?">
        <transition to="(VCiv) Expedir Carta Precatória" name="(VCiv) Expedir Carta Precatória"/>
        <transition to="(VCiv) Deslocar OJ origem carta precatoria" name="(VCiv) Deslocar OJ origem carta precatoria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CartaPrecValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntCartaPrec')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxCartaPrec')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Encaminhar Carta Precatória">
        <task name="(VCiv) Encaminhar Carta Precatória" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_expedientes_precatorias" mapped-name="frame:Processo_Fluxo_expedientes_precatorias" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Controlar prazos via carta" name="Finalizar"/>
    </task-node>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesCorreios().size() &gt; 0 &amp;&amp; !(tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje')) ? '(VCiv) Lançar movimento de Expedição de Aviso de Recebimento' : '(VCiv) Junção em citação e(ou) intimação'}" name="(VCiv) É Correio?">
        <transition to="(VCiv) Lançar movimento de Expedição de Aviso de Recebimento" name="(VCiv) Lançar movimento de Expedição de Aviso de Recebimento"/>
        <transition to="(VCiv) Junção em citação e(ou) intimação" name="(VCiv) Junção em citação e(ou) intimação"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Imprimir citação e(ou) intimação">
        <task name="(VCiv) Imprimir citação e(ou) intimação" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_expedientes_correios" mapped-name="frame:Processo_Fluxo_expedientes_correios" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Controlar prazos via correios" name="Aguardar retorno do AR"/>
    </task-node>
    <process-state name="(VCiv) Controlar prazos via correios">
        <sub-process name="(VCiv) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(VCiv) Junção em citação e(ou) intimação" name="(VCiv) Junção em citação e(ou) intimação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv:cpre:correios')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:cpre:correios','true')}"/>
        </event>
    </process-state>
    <fork name="(VCiv) Separação em citação e(ou) intimação">
        <transition to="(VCiv) É Correio?" name="(VCiv) É Correio?"/>
        <transition to="(VCiv) É via sistema?" name="(VCiv) É via sistema?"/>
        <transition to="(VCiv) É via Secretaria?" name="(VCiv) É via Secretaria?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('conteudo_dje_temp')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('magistrado_dje_temp')}"/>
        </event>
    </fork>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesEletronico().size() &gt; 0 &amp;&amp; !(tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje')) ? '(VCiv) Lançar movimento de Expedição Outros documentos' : '(VCiv) Junção em citação e(ou) intimação'}" name="(VCiv) É via sistema?">
        <transition to="(VCiv) Junção em citação e(ou) intimação" name="(VCiv) Junção em citação e(ou) intimação"/>
        <transition to="(VCiv) Lançar movimento de Expedição Outros documentos" name="(VCiv) Lançar movimento de Expedição Outros documentos"/>
    </decision>
    <node name="(VCiv) Lançar movimento de Expedição de Outros documentos">
        <transition to="(VCiv) Controlar prazos via MP" name="(VCiv) Controlar prazos via MP"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <process-state name="(VCiv) Controlar prazos via MP">
        <sub-process name="(VCiv) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv:cpre:MP')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:cpre:MP','true')}"/>
        </event>
    </process-state>
    <join name="(VCiv) Junção em citação e(ou) intimação">
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </join>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesPessoal().size() &gt; 0 &amp;&amp; !(tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje')) ? '(VCiv) Registrar ciência' : '(VCiv) Junção em citação e(ou) intimação'}" name="(VCiv) É via Secretaria?">
        <transition to="(VCiv) Registrar ciência" name="(VCiv) Registrar ciência"/>
        <transition to="(VCiv) Junção em citação e(ou) intimação" name="(VCiv) Junção em citação e(ou) intimação"/>
    </decision>
    <node name="(VCiv) Registrar ciência">
        <description><![CDATA[]]></description>
        <transition to="(VCiv) Junção em citação e(ou) intimação" name="(VCiv) Junção em citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.registrarCienciaExpedientePessoal()}"/>
        </event>
    </node>
    <node name="(VCiv) Lançar movimento de Expedição de Aviso de Recebimento">
        <transition to="(VCiv) Imprimir citação e(ou) intimação" name="(VCiv) Imprimir citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('C', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(74).lancarMovimento()}')}"/>
        </event>
    </node>
    <node name="(VCiv) Lançar movimento de Expedição de Carta Precatória">
        <transition to="(VCiv) Encaminhar Carta Precatória" name="(VCiv) Encaminhar Carta Precatória"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(76).lancarMovimento()}"/>
        </event>
    </node>
    <process-state name="(VCiv) Controlar prazos via carta">
        <sub-process name="(VCiv) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv:cpre:carta')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:cpre:carta','true')}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:citar_intimar_audiencia') ? '(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É citação e(ou) intimação da audiência?">
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
        <transition to="(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo" name="(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo">
        <task name="(VCiv) Preparar citação e(ou) intimação da audiência - Fluxo antigo" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Ignorar citação e(ou) intimação"/>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Separação em citação e(ou) intimação')}"/>
        </event>
    </task-node>
    <process-state name="(VCiv) Controlar prazos">
        <sub-process name="(VCiv) Controle de Prazos" binding="late"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:intimar_mp') ? '(VCiv) Preparar intimação ao Ministério Público' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É intimação ao Ministério Público?">
        <transition to="(VCiv) Preparar intimação ao Ministério Público" name="(VCiv) Preparar intimação ao Ministério Público"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Preparar intimação ao Ministério Público">
        <task name="(VCiv) Preparar intimação ao Ministério Público" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <transition to="(VCiv) Lançar movimento de Expedição de Outros documentos" name="(VCiv) Lançar movimento de Expedição de Outros documentos">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:pac:intimar_mp', 'true')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Lançar movimento de Expedição de Outros documentos')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:pac:intimar_mp') ? '(VCiv) Aguardando manifestação do Ministério Público' : '(VCiv) Controlar prazos'}" name="(VCiv) Ainda em intimação ao Ministério Público?">
        <transition to="(VCiv) Aguardando manifestação do Ministério Público" name="(VCiv) Aguardando manifestação do Ministério Público"/>
        <transition to="(VCiv) Controlar prazos" name="(VCiv) Controlar prazos"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Aguardando manifestação do Ministério Público">
        <task name="(VCiv) Aguardando manifestação do Ministério Público" swimlane="Secretaria" priority="3"/>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Finalizar tarefa"/>
        <event type="task-start">
            <action expression="#{preencherMovimento.deCodigo(493).comComplementoDeCodigo(13).doTipoLivre().preencherComTexto('Ministério Público').lancarMovimento()}"/>
        </event>
        <event type="task-end">
            <action expression="#{preencherMovimento.deCodigo(132).lancarMovimento()}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Encaminhar Carta Rogatória">
        <task name="(VCiv) Encaminhar Carta Rogatória" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_expedientes_precatorias" mapped-name="frame:Processo_Fluxo_expedientes_precatorias" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Controlar prazos via carta" name="Finalizar"/>
    </task-node>
    <node name="(VCiv) Lançar movimento de Expedição de Carta Rogatória">
        <transition to="(VCiv) Encaminhar Carta Rogatória" name="(VCiv) Encaminhar Carta Rogatória"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(77).lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(VCiv) Expedir Carta Rogatória">
        <task name="(VCiv) Expedir Carta Rogatória" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <transition to="(VCiv) Lançar movimento de Expedição de Carta Rogatória" name="(VCiv) Lançar movimento de Expedição de Carta Rogatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Apagar variáveis do fluxo" name="Cancelar e sair da tarefa"/>
        <transition to="(VCiv) Encaminhar para assinatura de carta rogatória?" name="Encaminhar para assinatura">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCartaRog', '(VCiv) Expedir Carta Rogatória')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCartaRog', '(VCiv) Deslocar OJ origem carta rogatoria')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCartaRog',org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CartaRogValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Lançar movimento de Expedição de Carta Rogatória')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('L')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar Carta Rogatória">
        <task name="(VCiv) Assinar Carta Rogatória" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Lançar movimento de Expedição de Carta Rogatória" name="(VCiv) Lançar movimento de Expedição de Carta Rogatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Expedir Carta Rogatória" name="Retornar para expedição de carta rogatória"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCartaRog',org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) Lançar movimento de Expedição de Carta Rogatória')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('L')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCartaRog')))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:CartaRogValidaParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxCartaRog') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntCartaRog') }" name="(VCiv) Encaminhar para assinatura de carta rogatória?">
        <transition to="(VCiv) Expedir Carta Rogatória" name="(VCiv) Expedir Carta Rogatória"/>
        <transition to="(VCiv) Deslocar OJ origem carta rogatoria" name="(VCiv) Deslocar OJ origem carta rogatoria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CartaRogValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntCartaRog')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxCartaRog')}"/>
        </event>
    </decision>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:expedir_carta_rogatoria') ? '(VCiv) Expedir Carta Rogatória' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É carta rogatória?">
        <transition to="(VCiv) Expedir Carta Rogatória" name="(VCiv) Expedir Carta Rogatória"/>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <process-state name="(VCiv) Controlar prazos via sistema">
        <sub-process name="(VCiv) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(VCiv) Junção em citação e(ou) intimação" name="(VCiv) Junção em citação e(ou) intimação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv:cpre:sistema')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('vciv:cpre:sistema','true')}"/>
        </event>
    </process-state>
    <node name="(VCiv) Lançar movimento de Expedição Outros documentos">
        <transition to="(VCiv) É competência dos Juizados?" name="(VCiv) É competência dos Juizados?"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:citar_intimar_reativacao') ? '(VCiv) Preparar intimação de reativação' : '(VCiv) Junção em Preparar Ato de Comunicação'}" name="(VCiv) É citação e(ou) intimação de reativação?">
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="(VCiv) Junção em Preparar Ato de Comunicação"/>
        <transition to="(VCiv) Preparar intimação de reativação" name="(VCiv) Preparar intimação de reativação"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Preparar intimação de reativação">
        <task name="(VCiv) Preparar intimação de reativação" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Preparar Ato de Comunicação" name="Nó de Desvio - (VCiv) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) É Mandado Reativação?" name="(VCiv) É Mandado Reativação?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Junção em Preparar Ato de Comunicação" name="Ignorar intimação"/>
        <event type="task-start">
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69')}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(VCiv) É Mandado Reativação?')}"/>
        </event>
    </task-node>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesMandados().size() &gt; 0 ? '(VCiv) Existe alguma Central de Mandados?' : '(VCiv) Separação em citação e(ou) intimação'}" name="(VCiv) É Mandado Reativação?">
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação"/>
        <transition to="(VCiv) Existe alguma Central de Mandados?" name="(VCiv) Existe alguma Central de Mandados?"/>
    </decision>
    <node name="(VCiv) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCitInt')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempMand')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCartaPrec')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCartaRog')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CitIntValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:MandValidoParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CartaPrecValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CartaRogValidaParaAss')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <node name="(VCiv) Deslocar OJ origem citacao">
        <transition to="(VCiv) Assinar Citação e(ou) intimação pelo magistrado" name="(VCiv) Assinar Citação e(ou) intimação pelo magistrado"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </node>
    <process-state name="(VCiv) Deslocar secretaria unificada citacao">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Preparar citação e(ou) intimação" name="(VCiv) Preparar citação e(ou) intimação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <node name="(VCiv) Deslocar OJ origem mandado">
        <transition to="(VCiv) Assinar mandado pelo magistrado" name="(VCiv) Assinar mandado pelo magistrado"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </node>
    <process-state name="(VCiv) Deslocar secretaria unificada mandado">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Expedir Mandado" name="(VCiv) Expedir Mandado"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <node name="(VCiv) Deslocar OJ origem carta precatoria">
        <transition to="(VCiv) Assinar Carta Precatória" name="(VCiv) Assinar Carta Precatória"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </node>
    <process-state name="(VCiv) Deslocar secretaria unificada carta precatoria">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Expedir Carta Precatória" name="(VCiv) Expedir Carta Precatória"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <node name="(VCiv) Deslocar OJ origem carta rogatoria">
        <transition to="(VCiv) Assinar Carta Rogatória" name="(VCiv) Assinar Carta Rogatória"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </node>
    <process-state name="(VCiv) Deslocar secretaria unificada carta rogatoria">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Expedir Carta Precatória" name="(VCiv) Expedir Carta Precatória"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada assinatura carta rogatoria">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Encaminhar Carta Rogatória" name="(VCiv) Encaminhar Carta Rogatória"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada assinatura carta precatoria">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Encaminhar Carta Precatória" name="(VCiv) Encaminhar Carta Precatória"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada assinatura mandado">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Existe alguma Central de Mandados?" name="(VCiv) Existe alguma Central de Mandados?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada assinatura citação">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Separação em citação e(ou) intimação" name="(VCiv) Separação em citação e(ou) intimação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery('delete from jbpm_variableinstance where id_ in( select vi.id_ from jbpm_variableinstance vi join jbpm_processinstance pi on (pi.id_= vi.processinstance_) join tb_processo_instance tpi on (tpi.id_proc_inst = pi.id_) join tb_processo tp on (tpi.id_processo = tp.id_processo) where tp.nr_processo = :numeroProcesso and name_ in ('pje:fluxo:deslocamento:orgaoCargoDestino','pje:fluxo:deslocamento:orgaoDestino') order by id_ desc)').setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
