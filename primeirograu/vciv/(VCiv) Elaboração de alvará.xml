<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(VCiv) Elaboração de alvará">
    <description><![CDATA[Elaboração de alvarás.......]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,7:5197,5:1338')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition to="(VCiv) Expedir alvará(s)" name="(VCiv) Expedir alvará(s)"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(VCiv) Expedir alvará(s)">
        <task name="(VCiv) Expedir alvará(s)" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="minuta_alvara" mapped-name="textEditCombo:minuta_alvara" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read"/>
            </controller>
        </task>
        <transition to="(VCiv) Apagar minuta não assinada de alvará" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Elaboração de alvará" name="Nó de Desvio - (VCiv) Elaboração de alvará">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Deslocar OJ origem " name="Enviar para assinatura"/>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '91')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_alvara'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action expression="#{ entityManager.createNativeQuery('select count(1) from client.vs_situacao_processo_new where nm_tarefa = \'(VCiv) Expedir alvará(s)\' and id_processo_trf = '.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf)).getSingleResult() &gt; 1 ? '' : ( processoJudicialService.sinalizarFluxo(tramitacaoProcessualService.recuperaProcesso(), 'pje:tjrn:fluxo:var:sair_tarefa_expedir_alvara', true, false, true) )}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '91')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(VCiv) Assinar alvará(s)">
        <task name="(VCiv) Assinar alvará(s)" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <transition to="(VCiv) Lançar movimento de expedição de alvará" name="(VCiv) Lançar movimento de expedição de alvará">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (VCiv) Elaboração de alvará" name="Nó de Desvio - (VCiv) Elaboração de alvará">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(VCiv) Expedir alvará(s)" name="Retornar para expedição de alvarás"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '91')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(VCiv) Lançar movimento de expedição de alvará')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('condicaoLancamentoMovimentosTemporario', '${true}')}"/>
        </event>
    </task-node>
    <node name="(VCiv) Lançar movimento de expedição de alvará">
        <transition to="(VCiv) Existe registro do processo na tarefa alvará(s) assinado(s)?" name="(VCiv) Existe registro do processo na tarefa alvará(s) assinado(s)?"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).associarAoDocumento(documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(73).lancarMovimento()}"/>
        </event>
    </node>
    <decision expression="#{entityManager.createNativeQuery(&quot;select count(*) from vs_situacao_processo_new s where s.nm_tarefa = '(VCiv) Alvará(s) assinado(s)' AND s.id_processo_trf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? 'Término' : '(VCiv) Alvará(s) assinado(s)'}" name="(VCiv) Existe registro do processo na tarefa alvará(s) assinado(s)?">
        <transition to="(VCiv) Alvará(s) assinado(s)" name="(VCiv) Alvará(s) assinado(s)"/>
        <transition to="Término" name="Término"/>
    </decision>
    <task-node end-tasks="true" name="(VCiv) Alvará(s) assinado(s)">
        <task name="(VCiv) Alvará(s) assinado(s)" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1 - aviso 
Label: O alvará foi assinado e já consta nos autos do processo. Caso deseje imprimi-lo, consulte a lista de documentos clicando no número do processo acima.
Escrita: Sim
Obrig.: Não
Tipo: Aviso]]></description>
        <transition to="Término" name="Finalizar"/>
        <transition to="Nó de Desvio - (VCiv) Elaboração de alvará" name="Nó de Desvio - (VCiv) Elaboração de alvará">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:documentosProcessuais:ocultarAnexos', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:incidental:peticoes', tramitacaoProcessualService.recuperaVariavel('minutaEmElaboracao'))}"/>
        </event>
    </task-node>
    <node name="(VCiv) Apagar minuta não assinada de alvará">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minuta_alvara')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Nó de Desvio - (VCiv) Elaboração de alvará">
        <task name="Nó de Desvio - (VCiv) Elaboração de alvará" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(VCiv) Expedir alvará(s)" name="(VCiv) Expedir alvará(s)"/>
        <transition to="(VCiv) Assinar alvará(s)" name="(VCiv) Assinar alvará(s)"/>
        <transition to="(VCiv) Alvará(s) assinado(s)" name="(VCiv) Alvará(s) assinado(s)"/>
    </task-node>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
    </end-state>
    <node name="(VCiv) Deslocar OJ origem ">
        <transition to="(VCiv) Assinar alvará(s)" name="(VCiv) Assinar alvará(s)"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </node>
    <process-state name="(VCiv) Deslocar secretaria unificada">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Expedir alvará(s)" name="(VCiv) Expedir alvará(s)"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada assinado">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Alvará(s) assinado(s)" name="(VCiv) Alvará(s) assinado(s)"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada termino">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="Término" name="Término"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(VCiv) Deslocar secretaria unificada inicio">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(VCiv) Expedir alvará(s)" name="(VCiv) Expedir alvará(s)"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.recuperaProcesso()}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>