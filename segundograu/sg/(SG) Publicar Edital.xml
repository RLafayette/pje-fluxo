<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Publicar Edital">
    <description><![CDATA[SG_PUB_EDITAL]]></description>  
    <!-- SWIMLANES --> 
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('599:1469,600:5899,600:5898,600:5197,600:5907,6:1469,5:5899,5:5898,5:5197,5:5907')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (SG) Publicar Edital">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483,602:5906,8:1338,8:5483,8:5906')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition to="(SG) Edital - EXPEDIR" name="(SG) Edital - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Edital - EXPEDIR">
        <task name="(SG) Edital - EXPEDIR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_prepararExpediente
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Término" name="Ignorar preparação de edital"/>
        <transition to="(SG) Encaminhar para assinatura de edital?" name="Encaminhar para assinatura do(a) secretário(a)">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(SG) Edital - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(SG) Secretário(a) [EDITAL] - ASSINAR')}"/>
        </transition>
        <transition to="(SG) Encaminhar para assinatura de edital?" name="Encaminhar para assinatura pelo gabinete">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(SG) Edital - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(SG) Edital pendente de assinatura pelo gabinete - ASSINAR')}"/>
        </transition>
        <transition to="(SG) Possui meio Edital?" name="(SG) Possui meio Edital?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(SG) Possui meio Edital?')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,65,69')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('D')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempEdital', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CitIntValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-start">
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,65,69')}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Secretário(a) [EDITAL] - ASSINAR">
        <task name="(SG) Secretário(a) [EDITAL] - ASSINAR" swimlane="Secretaria" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="(SG) Possui meio Edital?" name="(SG) Possui meio Edital?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Edital - EXPEDIR" name="Retornar para expedição de citação e(ou) intimação"/>
        <transition to="Nó de Desvio - (SG) Publicar Edital" name="Nó de Desvio - (SG) Publicar Edital">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Encaminhar para assinatura de edital?" name="Encaminhar para assinatura pelo gabinete">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(SG) Secretário(a) [EDITAL] - ASSINAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(SG) Edital pendente de assinatura pelo gabinete - ASSINAR')}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempEdital', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CitIntValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(SG) Possui meio Edital?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,65,69')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Edital pendente de assinatura pelo gabinete - ASSINAR">
        <task name="(SG) Edital pendente de assinatura pelo gabinete - ASSINAR" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (SG) Publicar Edital" name="Nó de Desvio - (SG) Publicar Edital">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Edital - EXPEDIR" name="Retornar para expedição de citação e (ou) intimação"/>
        <transition to="(SG) Possui meio Edital?" name="(SG) Possui meio Edital?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempEdital', org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(SG) Possui meio Edital?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,65,69')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempEdital')))}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:CitIntValidaParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxCitInt') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntCitInt') }" name="(SG) Encaminhar para assinatura de edital?">
        <transition to="(SG) Secretário(a) [EDITAL] - ASSINAR" name="(SG) Secretário(a) [EDITAL] - ASSINAR"/>
        <transition to="(SG) Edital - EXPEDIR" name="(SG) Edital - EXPEDIR"/>
        <transition to="(SG) Deslocar OJ origem citacao" name="(SG) Edital pendente de assinatura pelo gabinete - ASSINAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CitIntValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntCitInt')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxCitInt')}"/>
        </event>
    </decision>
    <node name="(SG) Deslocar OJ origem citacao">
        <transition to="(SG) Edital pendente de assinatura pelo gabinete - ASSINAR" name="(SG) Edital pendente de assinatura pelo gabinete - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
        </event>
    </node>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesEdital().size() &gt; 0 ? '(SG) Publicar edital no DJEN' : 'Término'}" name="(SG) Possui meio Edital?">
        <transition to="(SG) Publicar edital no DJEN" name="(SG) Publicar edital no DJEN"/>
        <transition to="Término" name="Término"/>
    </decision>
    <process-state name="(SG) Publicar edital no DJEN">
        <sub-process name="(SG) Publicação no DJEN" binding="late"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
    </process-state>
    <node name="(SG) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempEdital')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CitIntValidaParaAss')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Publicar Edital">
        <task name="Nó de Desvio - (SG) Publicar Edital" swimlane="Nó de Desvio - (SG) Publicar Edital" priority="3"/>
        <transition to="(SG) Edital - EXPEDIR" name="(SG) Edital - EXPEDIR"/>
        <transition to="Término" name="Término"/>
        <transition to="Nó de Desvio - (SG) Publicar Edital" name="Nó de Desvio - (SG) Publicar Edital"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
