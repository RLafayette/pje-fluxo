<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Fluxo básico geral">
    <description><![CDATA[Código do fluxo: SG_FBG
.......
Descrição: Fluxo básico geral de entrada dos processos.

Raia        Localização              Papel
Secretaria  Secretaria Segundo Grau  Chefe de Secretaria
Secretaria  Secretaria Segundo Grau  Servidor Geral.]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Fluxo básico geral">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483,602:5906,8:1338,8:5483,8:5906')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="(SG) Direciona diretamente para secretaria?" name="(SG) Direciona diretamente para secretaria?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:fbg:direcionar_secretaria') == true ? '(SG) Secretaria - ANALISAR' : '(SG) Acrescentar situação do processo em andamento'}" name="(SG) Direciona diretamente para secretaria?">
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <transition to="(SG) Acrescentar situação do processo em andamento" name="(SG) Acrescentar situação do processo em andamento"/>
    </decision>
    <node name="(SG) Acrescentar situação do processo em andamento">
        <transition to="(SG) É apelação?" name="(SG) É apelação?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.acrescentarSituacao('jus:andamento')}"/>
        </event>
    </node>
    <decision expression="#{parametroUtil.getParametro('pje:tjrn:pg:classeJudicial:Prevencao').contains(':'.concat(tramitacaoProcessualService.recuperaProcesso().classeJudicial.codClasseJudicial).concat(':')) ? '(SG) Preparação de despacho inicial' : '(SG) É recurso inominado?'}" name="(SG) É apelação?">
        <transition to="(SG) Preparação de despacho inicial" name="(SG) Preparação de despacho inicial"/>
        <transition to="(SG) É recurso inominado?" name="(SG) É recurso inominado?"/>
    </decision>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().classeJudicial.codClasseJudicial == 460 ? '(SG) Lançar movimento concluso para julgamento' : '(SG) Tem pedido de urgência?'}" name="(SG) É recurso inominado?">
        <transition to="(SG) Tem pedido de urgência?" name="(SG) Tem pedido de urgência?"/>
        <transition to="(SG) Lançar movimento concluso para julgamento" name="(SG) Lançar movimento concluso para julgamento"/>
    </decision>
    <node name="(SG) Lançar movimento concluso para julgamento">
        <transition to="(SG) Enviar para decisão colegiada" name="(SG) Enviar para decisão colegiada"/>
        <event type="node-enter">
            <action name="upd" expression="#{preencherMovimento.deCodigo(51).comComplementoDeCodigo(3).doTipoDominio().preencherComElementoDeCodigo(36).lancarMovimento()}"/>
        </event>
    </node>
    <process-state name="(SG) Enviar para decisão colegiada">
        <sub-process name="(SG) Decisão colegiada como relator" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.temUrgencia() == true ? '(SG) Preparação de decisão de urgência inicial' : '(SG) Preparação de despacho inicial'}" name="(SG) Tem pedido de urgência?">
        <transition to="(SG) Preparação de decisão de urgência inicial" name="(SG) Preparação de decisão de urgência inicial"/>
        <transition to="(SG) Preparação de despacho inicial" name="(SG) Preparação de despacho inicial"/>
    </decision>
    <process-state name="(SG) Preparação de decisão de urgência inicial">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_urgencia_inicial')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_urgencia_inicial', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de despacho inicial">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho_inicial')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho_inicial', true)}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(SG) Secretaria - ANALISAR">
        <task name="(SG) Secretaria - ANALISAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
                <variable name="sg_fbg_apensar_desapensar" mapped-name="sim_nao:sg_fbg_apensar_desapensar" access="read,write"/>
                <variable name="sg_fbg_certificar_decurso_prazo" mapped-name="sim_nao:sg_fbg_certificar_decurso_prazo" access="read,write"/>
                <variable name="sg_fbg_certificar_transito_julgado" mapped-name="sim_nao:sg_fbg_certificar_transito_julgado" access="read,write"/>
                <variable name="sg_fbg_controlar_retorno_expediente" mapped-name="sim_nao:sg_fbg_controlar_retorno_expediente" access="read,write"/>
                <variable name="sg_fbg_encerrar_expediente" mapped-name="sim_nao:sg_fbg_encerrar_expediente" access="read,write"/>
                <variable name="sg_fbg_expedir_alvara" mapped-name="sim_nao:sg_fbg_expedir_alvara" access="read,write"/>
                <variable name="sg_fbg_expedir_carta" mapped-name="sim_nao:sg_fbg_expedir_carta" access="read,write"/>
                <variable name="sg_fbg_expedir_mandado" mapped-name="sim_nao:sg_fbg_expedir_mandado" access="read,write"/>
                <variable name="sg_fbg_expedir_oficio" mapped-name="sim_nao:sg_fbg_expedir_oficio" access="read,write"/>
                <variable name="sg_fbg_expedir_outros_documentos" mapped-name="sim_nao:sg_fbg_expedir_outros_documentos" access="read,write"/>
                <variable name="sg_fbg_intimar_citar" mapped-name="sim_nao:sg_fbg_intimar_citar" access="read,write"/>
                <variable name="sg_fbg_intimar_citar_estado" mapped-name="sim_nao:sg_fbg_intimar_citar_estado" access="read,write"/>
                <variable name="sg_fbg_intimar_citar_mp" mapped-name="sim_nao:sg_fbg_intimar_citar_mp" access="read,write"/>
                <variable name="sg_fbg_retificar_tipo_documento" mapped-name="sim_nao:sg_fbg_retificar_tipo_documento" access="read,write"/>
                <variable name="sg_fbg_publicar_dje" mapped-name="sim_nao:sg_fbg_publicar_dje" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: aviso1
   Label: Marque a(s) opção(ões) de cumprimento abaixo, em seguida, clique em "Próxima ação: 01 - Prosseguir na(s) tarefa(s) acima selecionada(s)". Ou se preferir, deixe as opções de cumprimento desmarcadas e escolha a "Próxima ação" desejada.
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

16. Variável: aviso2
   Label: #{tramitacaoProcessualService.recuperaVariavel('sg:fbg:aviso_secretaria_analisar') ? '' : tramitacaoProcessualService.recuperaVariavel('sg:fbg:aviso_secretaria_analisar')}
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

3. Variável: sg_fbg_apensar_desapensar
   Label: Apensar / desapensar
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

4. Variável: sg_fbg_certificar_decurso_prazo
   Label: Certificar decurso de prazo
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

5. Variável: sg_fbg_certificar_transito_julgado
   Label: Certificar trânsito em julgado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

6. Variável: sg_fbg_encerrar_expediente
   Label: Encerrar expediente manualmente
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

7. Variável: sg_fbg_expedir_alvara
   Label: Expedir alvará
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

8. Variável: sg_fbg_expedir_carta
   Label: Expedir carta de ordem, precatória ou rogatória
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

9. Variável: sg_fbg_expedir_mandado
   Label: Expedir mandado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

10. Variável: sg_fbg_expedir_oficio
   Label: Expedir ofício
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

11. Variável: sg_fbg_expedir_outros_documentos
   Label: Expedir outros documentos
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

12. Variável: sg_fbg_intimar_citar
   Label: Intimar ou citar via sistema, correios ou edital
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

13. Variável: sg_fbg_intimar_citar_estado
   Label: Intimar ou citar Estado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

14. Variável: sg_fbg_intimar_citar_mp
   Label: Intimar ou citar Ministério Público
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

15. Variável: sg_fbg_retificar_tipo_documento
   Label: Retificar tipo de documento
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

16. Variável: sg_fbg_publicar_dje
   Label: Publicar no Diário da Justiça Eletrônico
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

17. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Fluxo básico geral" name="Nó de Desvio - (SG) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Lançar fluxos" name="01 - Prosseguir na(s) tarefa(s) acima selecionada(s)"/>
        <transition to="(SG) Gravar variavel fluxo unico - Suspender o processo" name="02 - Suspender o processo"/>
        <transition to="(SG) Gravar variavel fluxo unico - Redistribuir" name="03 - Redistribuir"/>
        <transition to="(SG) Gravar variavel fluxo unico - Arquivar o processo" name="04 - Arquivar o processo"/>
        <transition to="(SG) Gravar variavel fluxo unico - Remeter para instância superior" name="05 - Remeter para instância superior"/>
        <transition to="(SG) Gravar variavel fluxo unico - Remeter para o primeiro grau" name="06 - Remeter para o primeiro grau">
            <condition expression="#{ parametroUtil.getParametro('pje:tjrn:remessa:pg:classeJudicial').contains(':'.concat(tramitacaoProcessualService.recuperaProcesso().classeJudicial.codClasseJudicial).concat(':')) }"/>
        </transition>
        <transition to="(SG) Gravar variavel fluxo unico - Cancelar distribuição" name="07 - Cancelar distribuição"/>
        <transition to="(SG) Gravar variavel fluxo unico - Controlar retorno de expediente" name="08 - Controlar retorno de expediente">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Gravar variavel fluxo unico - Enviar concluso para decisão" name="08 - Enviar concluso para decisão"/>
        <transition to="(SG) Gravar variavel fluxo unico - Enviar concluso para decisão de urgência" name="09 - Enviar concluso para decisão de urgência"/>
        <transition to="(SG) Gravar variavel fluxo unico - Enviar concluso para despacho" name="10 - Enviar concluso para despacho"/>
        <transition to="(SG) Gravar variavel fluxo unico - Enviar para preparação do voto, relatório e ementa" name="11 - Enviar concluso para julgamento"/>
        <transition to="(SG) Gravar variavel fluxo unico - Encaminhar processo para outro gabinete" name="12 - Encaminhar processo para outro gabinete">
            <condition expression="#{empty tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjOrigem')}"/>
        </transition>
        <transition to="(SG) Gravar variavel fluxo unico - Devolver ao relator de origem do encaminhamento" name="12 - Devolver ao relator de origem do encaminhamento">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjOrigem')}"/>
        </transition>
        <transition to="(SG) Gravar variavel fluxo unico - Enviar para análise de admissibilidade" name="13 - Enviar para análise de admissibilidade">
            <condition expression="#{empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj') and !orgaoJulgadorManager.orgaosPorColegiado(authenticator.getOrgaoJulgadorColegiadoAtual()).contains(orgaoJulgadorService.findById(32))}"/>
        </transition>
        <transition to="(SG) Gravar variavel fluxo unico - Devolver ao relator de origem" name="13 - Devolver ao relator de origem">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Gravar variavel fluxo unico - Encaminhamento ao núcleo de conciliação e mediação" name="14 - Encaminhar ao núcleo de conciliação e mediação"/>
        <transition to="(SG) Gravar variavel fluxo unico - Remeter para outro juízo" name="15 - Remeter para outro juízo"/>
        <transition to="(SG) Gravar variavel fluxo unico - Encaminhamento à COJUD" name="16 - Encaminhar à COJUD"/>
        <transition to="(SG) Gravar variavel fluxo unico - Devolver ao apoio do relator de origem" name="17 - Devolver ao apoio do relator de origem">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Conclusão para decisão da presidência" name="18 - Conclusão para decisão da presidência"/>
        <transition to="(SG) Conclusão para despacho da presidência" name="19 - Conclusão para despacho da presidência"/>
        <transition to="(SG) Enviar para a Turma de Uniformização de Jurisprudência" name="20 - Enviar para a Turma de Uniformização de Jurisprudência"/>
        <transition to="(SG) Gravar variavel fluxo unico - Encaminhar para análise de prevenção" name="21 - Encaminhar para análise de prevenção"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', '')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_apensar_desapensar') == true ? '{sg_fbg_apensar_desapensar}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_certificar_decurso_prazo') == true ? '{sg_fbg_certificar_decurso_prazo}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_certificar_transito_julgado') == true ? '{sg_fbg_certificar_transito_julgado}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_encerrar_expediente') == true ? '{sg_fbg_encerrar_expediente}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_alvara') == true ? '{sg_fbg_expedir_alvara}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_carta') == true ? '{sg_fbg_expedir_carta}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_mandado') == true ? '{sg_fbg_expedir_mandado}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_oficio') == true ? '{sg_fbg_expedir_oficio}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_outros_documentos') == true ? '{sg_fbg_expedir_outros_documentos}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_intimar_citar') == true ? '{sg_fbg_intimar_citar}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_estado') == true ? '{sg_fbg_intimar_citar_estado}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_mp') == true ? '{sg_fbg_intimar_citar_mp}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_retificar_tipo_documento') == true ? '{sg_fbg_retificar_tipo_documento}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_publicar_dje') == true ? '{sg_fbg_publicar_dje}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_controlar_retorno_expediente') == true ? '{sg_fbg_controlar_retorno_expediente}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_apensar_desapensar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_certificar_decurso_prazo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_certificar_transito_julgado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_intimar_citar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_estado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_mp')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_carta')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_alvara')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_oficio')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_encerrar_expediente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_retificar_tipo_documento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_outros_documentos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_publicar_dje')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_controlar_retorno_expediente')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_apensar_desapensar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_certificar_decurso_prazo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_certificar_transito_julgado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar_estado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar_mp')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_carta')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_alvara')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_oficio')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_encerrar_expediente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_retificar_tipo_documento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_outros_documentos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_publicar_dje')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:fbg:aviso_secretaria_analisar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_controlar_retorno_expediente')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Lançar fluxos">
        <sub-process name="(SG) Lançador de fluxo" binding="late"/>
        <transition to="(SG) Encaminhar para aguardar cumprimentos?" name="(SG) Encaminhar para aguardar cumprimentos?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:aviso_secretaria_analisar', 'Processo enviado com sucesso para as tarefas selecionadas.')}"/>
        </event>
    </process-state>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM SituacaoProcesso AS s WHERE s.nomeTarefa not in ('(SG) Secretaria - ANALISAR','(SG) Secretaria - AGUARDAR','(SG) Voto [não relator] - VOTAR','(SG) Sessão de gamento [outros julgadores] - AGUARDAR','(SG) Voto [não relator] - MINUTAR','(SG) Voto [não relator] - CONFIRMAR','(SG) Voto [não relator] - VALIDAR','(SG) Voto [não relator] - ASSINAR') AND s.processoTrf.idProcessoTrf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(SG) Secretaria - AGUARDAR' : '(SG) Secretaria - ANALISAR'}" name="(SG) Encaminhar para aguardar cumprimentos?">
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <transition to="(SG) Secretaria - AGUARDAR" name="(SG) Secretaria - AGUARDAR"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Secretaria - AGUARDAR">
        <task name="(SG) Secretaria - AGUARDAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="sg_fbg_apensar_desapensar" mapped-name="sim_nao:sg_fbg_apensar_desapensar" access="read,write"/>
                <variable name="sg_fbg_certificar_decurso_prazo" mapped-name="sim_nao:sg_fbg_certificar_decurso_prazo" access="read,write"/>
                <variable name="sg_fbg_certificar_transito_julgado" mapped-name="sim_nao:sg_fbg_certificar_transito_julgado" access="read,write"/>
                <variable name="sg_fbg_controlar_retorno_expediente" mapped-name="sim_nao:sg_fbg_controlar_retorno_expediente" access="read,write"/>
                <variable name="sg_fbg_encerrar_expediente" mapped-name="sim_nao:sg_fbg_encerrar_expediente" access="read,write"/>
                <variable name="sg_fbg_expedir_alvara" mapped-name="sim_nao:sg_fbg_expedir_alvara" access="read,write"/>
                <variable name="sg_fbg_expedir_carta" mapped-name="sim_nao:sg_fbg_expedir_carta" access="read,write"/>
                <variable name="sg_fbg_expedir_mandado" mapped-name="sim_nao:sg_fbg_expedir_mandado" access="read,write"/>
                <variable name="sg_fbg_expedir_oficio" mapped-name="sim_nao:sg_fbg_expedir_oficio" access="read,write"/>
                <variable name="sg_fbg_expedir_outros_documentos" mapped-name="sim_nao:sg_fbg_expedir_outros_documentos" access="read,write"/>
                <variable name="sg_fbg_intimar_citar" mapped-name="sim_nao:sg_fbg_intimar_citar" access="read,write"/>
                <variable name="sg_fbg_intimar_citar_estado" mapped-name="sim_nao:sg_fbg_intimar_citar_estado" access="read,write"/>
                <variable name="sg_fbg_intimar_citar_mp" mapped-name="sim_nao:sg_fbg_intimar_citar_mp" access="read,write"/>
                <variable name="sg_fbg_retificar_tipo_documento" mapped-name="sim_nao:sg_fbg_retificar_tipo_documento" access="read,write"/>
                <variable name="sg_fbg_publicar_dje" mapped-name="sim_nao:sg_fbg_publicar_dje" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: aviso1
   Label: Marque a(s) opção(ões) de cumprimento abaixo, em seguida, clique em "Próxima ação: 01 - Prosseguir na(s) tarefa(s) acima selecionada(s)". Ou se preferir, deixe as opções de cumprimento desmarcadas e escolha a "Próxima ação" desejada.
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

3. Variável: sg_fbg_apensar_desapensar
   Label: Apensar / desapensar
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

4. Variável: sg_fbg_certificar_decurso_prazo
   Label: Certificar decurso de prazo
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

5. Variável: sg_fbg_certificar_transito_julgado
   Label: Certificar trânsito em julgado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

6. Variável: sg_fbg_encerrar_expediente
   Label: Encerrar expediente manualmente
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

7. Variável: sg_fbg_expedir_alvara
   Label: Expedir alvará
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

8. Variável: sg_fbg_expedir_carta
   Label: Expedir carta de ordem, precatória ou rogatória
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

9. Variável: sg_fbg_expedir_mandado
   Label: Expedir mandado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

10. Variável: sg_fbg_expedir_oficio
   Label: Expedir ofício
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

11. Variável: sg_fbg_expedir_outros_documentos
   Label: Expedir outros documentos
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

12. Variável: sg_fbg_intimar_citar
   Label: Intimar ou citar via sistema, correios ou edital
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

13. Variável: sg_fbg_intimar_citar_estado
   Label: Intimar ou citar Estado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

14. Variável: sg_fbg_intimar_citar_mp
   Label: Intimar ou citar Ministério Público
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

15. Variável: sg_fbg_retificar_tipo_documento
   Label: Retificar tipo de documento
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

16. Variável: sg_fbg_publicar_dje
   Label: Publicar no Diário da Justiça Eletrônico
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox]]></description>
        <transition to="(SG) Secretaria - ANALISAR" name="Encaminhar para (SG) Secretaria - ANALISAR"/>
        <transition to="Nó de Desvio - (SG) Fluxo básico geral" name="Nó de Desvio - (SG) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Lançar fluxos" name="01 - Prosseguir na(s) tarefa(s) acima selecionada(s)"/>
        <transition to="(SG) Encaminhar para aguardar cumprimentos?" name="(SG) Encaminhar para aguardar cumprimentos?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', '')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_apensar_desapensar') == true ? '{sg_fbg_apensar_desapensar}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_certificar_decurso_prazo') == true ? '{sg_fbg_certificar_decurso_prazo}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_certificar_transito_julgado') == true ? '{sg_fbg_certificar_transito_julgado}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_encerrar_expediente') == true ? '{sg_fbg_encerrar_expediente}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_alvara') == true ? '{sg_fbg_expedir_alvara}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_carta') == true ? '{sg_fbg_expedir_carta}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_mandado') == true ? '{sg_fbg_expedir_mandado}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_oficio') == true ? '{sg_fbg_expedir_oficio}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_expedir_outros_documentos') == true ? '{sg_fbg_expedir_outros_documentos}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_intimar_citar') == true ? '{sg_fbg_intimar_citar}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_estado') == true ? '{sg_fbg_intimar_citar_estado}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_mp') == true ? '{sg_fbg_intimar_citar_mp}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_retificar_tipo_documento') == true ? '{sg_fbg_retificar_tipo_documento}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_publicar_dje') == true ? '{sg_fbg_publicar_dje}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:opcoesCumprimento', tramitacaoProcessualService.recuperaVariavel('sg:fbg:opcoesCumprimento').concat(tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:sg_fbg_controlar_retorno_expediente') == true ? '{sg_fbg_controlar_retorno_expediente}' : ''))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_apensar_desapensar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_certificar_decurso_prazo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_certificar_transito_julgado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_intimar_citar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_estado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_intimar_citar_mp')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_carta')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_alvara')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_oficio')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_encerrar_expediente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_retificar_tipo_documento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_expedir_outros_documentos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_publicar_dje')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:sg_fbg_controlar_retorno_expediente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sg:finalizarCumprimentosSec')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Encaminhar para aguardar cumprimentos?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('sg:finalizarCumprimentosSec', 'true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_apensar_desapensar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_certificar_decurso_prazo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_certificar_transito_julgado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar_estado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar_mp')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_carta')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_alvara')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_oficio')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_encerrar_expediente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_retificar_tipo_documento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_expedir_outros_documentos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_publicar_dje')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:fbg:aviso_secretaria_analisar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_controlar_retorno_expediente')}"/>
        </event>
    </task-node>
    <node name="(SG) Gravar variavel fluxo unico - Suspender o processo">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Controlar suspensão de processo')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Encaminhar para análise de prevenção">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Prevencao')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Redistribuir">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de redistribuição')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Arquivar o processo">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação para arquivamento')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Remeter para instância superior">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de remessa para instância superior')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Remeter para o primeiro grau">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de remessa para o primeiro grau')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Cancelar distribuição">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Confirmar cancelamento da distribuição')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Controlar retorno de expediente">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Controle de retorno de expediente')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Enviar concluso para decisão">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de decisão genérica')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Enviar concluso para decisão de urgência">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de decisão de urgência')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Enviar concluso para despacho">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de despacho genérico')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Enviar para preparação do voto, relatório e ementa">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de voto, relatório e ementa')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Enviar para análise de admissibilidade">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de remessa para admissibilidade de recurso')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Encaminhar processo para outro gabinete">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Encaminhamento para outro gabinete')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Devolver ao relator de origem do encaminhamento">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Retornar ao gabinete de origem do encaminhamento')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Devolver ao relator de origem">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Retornar ao gabinete de origem')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Devolver ao apoio do relator de origem">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Retornar ao apoio do gabinete de origem')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Encaminhamento ao núcleo de conciliação e mediação">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Encaminhamento ao núcleo de conciliação e mediação')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Remeter para outro juízo">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Preparação de remessa para outro juízo')}"/>
        </event>
    </node>
    <node name="(SG) Gravar variavel fluxo unico - Encaminhamento à COJUD">
        <transition to="(SG) Pode ir para subfluxo único?" name="(SG) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:sub_fluxo_unico', '(SG) Encaminhamento à COJUD')}"/>
        </event>
    </node>
    <decision expression="#{entityManager.createNativeQuery(&quot;select count(*) from vs_situacao_processo_new s where s.nm_tarefa not in ('(SG) Secretaria - ANALISAR','(SG) Voto [não relator] - VOTAR','(SG) Sessão de julgamento [outros julgadores] - AGUARDAR','(SG) Voto [não relator] - MINUTAR','(SG) Voto [não relator] - CONFIRMAR','(SG) Voto [não relator] - VALIDAR','(SG) Voto [não relator] - ASSINAR') AND s.id_processo_trf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(SG) Gravar mensagem nao pode entrar no fluxo' : tramitacaoProcessualService.recuperaVariavel('sg:paj:sub_fluxo_unico')}" name="(SG) Pode ir para subfluxo único?">
        <transition to="(SG) Controlar suspensão de processo" name="(SG) Controlar suspensão de processo"/>
        <transition to="(SG) Preparação de redistribuição" name="(SG) Preparação de redistribuição"/>
        <transition to="(SG) Preparação para arquivamento" name="(SG) Preparação para arquivamento"/>
        <transition to="(SG) Preparação de remessa para instância superior" name="(SG) Preparação de remessa para instância superior"/>
        <transition to="(SG) Preparação de remessa para o primeiro grau" name="(SG) Preparação de remessa para o primeiro grau"/>
        <transition to="(SG) Confirmar cancelamento da distribuição" name="(SG) Confirmar cancelamento da distribuição"/>
        <transition to="(SG) Controle de retorno de expediente" name="(SG) Controle de retorno de expediente"/>
        <transition to="(SG) Preparação de decisão genérica" name="(SG) Preparação de decisão genérica"/>
        <transition to="(SG) Preparação de decisão de urgência" name="(SG) Preparação de decisão de urgência"/>
        <transition to="(SG) Preparação de decisão de embargos de declaração" name="(SG) Preparação de decisão de embargos de declaração"/>
        <transition to="(SG) Preparação de despacho genérico" name="(SG) Preparação de despacho genérico"/>
        <transition to="(SG) Preparação de remessa para admissibilidade de recurso" name="(SG) Preparação de remessa para admissibilidade de recurso"/>
        <transition to="(SG) Retornar ao gabinete de origem" name="(SG) Retornar ao gabinete de origem"/>
        <transition to="(SG) Encaminhamento para outro gabinete" name="(SG) Encaminhamento para outro gabinete"/>
        <transition to="(SG) Preparação de voto, relatório e ementa" name="(SG) Preparação de voto, relatório e ementa"/>
        <transition to="(SG) Retornar ao gabinete de origem do encaminhamento" name="(SG) Retornar ao gabinete de origem do encaminhamento"/>
        <transition to="(SG) Gravar mensagem nao pode entrar no fluxo" name="(SG) Gravar mensagem nao pode entrar no fluxo"/>
        <transition to="(SG) Encaminhamento ao núcleo de conciliação e mediação" name="(SG) Encaminhamento ao núcleo de conciliação e mediação"/>
        <transition to="(SG) Retornar ao apoio do gabinete de origem" name="(SG) Retornar ao apoio do gabinete de origem"/>
        <transition to="(SG) Preparação de remessa para outro juízo" name="(SG) Preparação de remessa para outro juízo"/>
        <transition to="(SG) Encaminhamento à COJUD" name="(SG) Encaminhamento à COJUD"/>
        <transition to="(SG) Prevencao" name="(SG) Prevencao"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:sub_fluxo_unico')}"/>
        </event>
    </decision>
    <node name="(SG) Gravar mensagem nao pode entrar no fluxo">
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:aviso_secretaria_analisar', 'O processo não pôde ser movimentado pois há ações sendo efetuadas em outras tarefas. Para movimentá-lo, é necessário finalizar os procedimentos nas demais caixas e deixá-lo, apenas, em &quot;(SG) Secretaria - ANALISAR&quot;.')}"/>
        </event>
    </node>
    <process-state name="(SG) Preparação de decisão genérica">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:urgente')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de urgência">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:urgente')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de embargos de declaração">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:urgente')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de despacho genérico">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:urgente')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de redistribuição">
        <sub-process name="(SG) Redistribuição" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Controlar suspensão de processo">
        <sub-process name="(SG) Controle de suspensão" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Preparação para arquivamento">
        <sub-process name="(SG) Arquivamento" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Preparação de remessa para instância superior">
        <sub-process name="(SG) Remessa para outra instância" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:reminst:remessa_instancia_superior')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:reminst:remessa_instancia_superior', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de remessa para o primeiro grau">
        <sub-process name="(SG) Remessa para outra instância" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:reminst:remessa_primeiro_grau')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:reminst:remessa_primeiro_grau', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Confirmar cancelamento da distribuição">
        <sub-process name="(SG) Cancelamento da distribuição" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Controle de retorno de expediente">
        <sub-process name="(SG) Controle de Retorno de Expediente" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Preparação de voto, relatório e ementa">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:julgamento')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:julgamento', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de remessa para admissibilidade de recurso">
        <sub-process name="(SG) Remessa para admissibilidade de recurso" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <node name="(SG) Retornar ao gabinete de origem">
        <transition to="(SG) Preparação de decisão sobre reexame de acórdão" name="(SG) Preparação de decisão sobre reexame de acórdão"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('relatoria de origem').comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(200002).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjCargo'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjColegiado'))}"/>
            <action expression="#{processoJudicialService.deslocarOrgaoJulgador(tramitacaoProcessualService.recuperaProcesso(), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjColegiado'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjCargo'), false)}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:remadmrec:idOj')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:remadmrec:idOjCargo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:remadmrec:idOjColegiado')}"/>
        </event>
    </node>
    <node name="(SG) Retornar ao apoio do gabinete de origem">
        <transition to="(SG) Autos devolvidos da análise de admissibilidade - ANALISAR" name="(SG) Autos devolvidos da análise de admissibilidade - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('relatoria de origem').comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(200003).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjCargo'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjColegiado'))}"/>
            <action expression="#{processoJudicialService.deslocarOrgaoJulgador(tramitacaoProcessualService.recuperaProcesso(), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjColegiado'), tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOjCargo'), false)}"/>
            <action expression="#{entityManager.createNativeQuery('insert into client.tb_proc_trf_remessa_vp (id_processo_trf, id_orgao_julgador, id_evento, id_usuario, id_orgao_julgador_anterior, id_orgao_julgador_colegiado_anterior, id_orgao_julgador_colegiado) values (:id_processo_trf, :id_orgao_julgador, :id_evento, :id_usuario, :id_orgao_julgador_anterior, :id_orgao_julgador_colegiado_anterior,  :id_orgao_julgador_colegiado)').setParameter('id_processo_trf', tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf()).setParameter('id_orgao_julgador', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador).setParameter('id_evento', 258).setParameter('id_usuario',  authenticator.getIdUsuarioLogado()).setParameter('id_orgao_julgador_anterior', 43).setParameter('id_orgao_julgador_colegiado_anterior',  8).setParameter('id_orgao_julgador_colegiado',  tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado).executeUpdate()}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:remadmrec:idOj')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:remadmrec:idOjCargo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:remadmrec:idOjColegiado')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(SG) Autos devolvidos da análise de admissibilidade - ANALISAR">
        <task name="(SG) Autos devolvidos da análise de admissibilidade - ANALISAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Processo recebido da análise de admissibilidade. Clique em Prosseguir para seguir normalmente no fluxo.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar movimentação em lote]]></description>
        <transition to="(SG) Secretaria - ANALISAR" name="Prosseguir"/>
        <transition to="Nó de Desvio - (SG) Fluxo básico geral" name="Nó de Desvio - (SG) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <process-state name="(SG) Preparação de decisão sobre reexame de acórdão">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_reanalise_acordao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_reanalise_acordao', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Encaminhamento para outro gabinete">
        <sub-process name="(SG) Encaminhamento para outro gabinete" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Encaminhamento ao núcleo de conciliação e mediação">
        <sub-process name="(SG) Controle do NCM" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Prevencao">
        <sub-process name="(SG) Prevencao" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fbg:prevencao')}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fbg:prevencao', true)}"/>
        </event>
    </process-state>
    <node name="(SG) Retornar ao gabinete de origem do encaminhamento">
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto(tramitacaoProcessualService.recuperaVariavel('sg:encgab:OrgJulgadorOrigem')).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(200003).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjOrigem'), tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjCargoOrigem'), tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjcOrigem'))}"/>
            <action expression="#{processoJudicialService.deslocarOrgaoJulgador(tramitacaoProcessualService.recuperaProcesso(), tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjOrigem'), tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjcOrigem'), tramitacaoProcessualService.recuperaVariavel('sg:encgab:idOjCargoOrigem'), false)}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:encgab:idOjOrigem')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:encgab:idOjCargoOrigem')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:encgab:idOjcOrigem')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:encgab:OrgJulgadorOrigem')}"/>
        </event>
    </node>
    <process-state name="(SG) Preparação de remessa para outro juízo">
        <sub-process name="(SG) Remessa para outro juízo" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Encaminhamento à COJUD">
        <sub-process name="(SG) Encaminhamento à COJUD" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Fluxo básico geral">
        <task name="Nó de Desvio - (SG) Fluxo básico geral" swimlane="Nó de Desvio - (SG) Fluxo básico geral" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <transition to="(SG) Autos devolvidos da análise de admissibilidade - ANALISAR" name="(SG) Autos devolvidos da análise de admissibilidade - ANALISAR"/>
        <transition to="(SG) Secretaria - AGUARDAR" name="(SG) Secretaria - AGUARDAR"/>
        <transition to="(SG) Despachados pela presidência" name="(SG) Despachados pela presidência"/>
    </task-node>
    <process-state name="(SG) Conclusão para decisão da presidência">
        <sub-process name="(SG) Remessa para a presidência" binding="late"/>
        <transition to="(SG) Tem certidão sem efeito?" name="(SG) Tem certidão sem efeito?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:rempre:decisao_presidencia')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:rempre:decisao_presidencia','true')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Conclusão para despacho da presidência">
        <sub-process name="(SG) Remessa para a presidência" binding="late"/>
        <transition to="(SG) Tem certidão sem efeito?" name="(SG) Tem certidão sem efeito?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:rempre:despacho_presidencia')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:rempre:despacho_presidencia','true')}"/>
        </event>
    </process-state>
    <decision expression="#{true == tramitacaoProcessualService.recuperaVariavel('pje:rempre:temcertidaosemefeito') ? '(SG) Secretaria - AGUARDAR' : '(SG) Despachados pela presidência'}" name="(SG) Tem certidão sem efeito?">
        <transition to="(SG) Secretaria - AGUARDAR" name="(SG) Secretaria - AGUARDAR"/>
        <transition to="(SG) Despachados pela presidência" name="(SG) Despachados pela presidência"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:rempre:temcertidaosemefeito')}"/>
        </event>
    </decision>
    <process-state name="(SG) Preparar comunicação da decisão inicial">
        <sub-process name="(SG) Preparar ato de comunicação" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <task-node end-tasks="true" name="(SG) Despachados pela presidência">
        <task name="(SG) Despachados pela presidência" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="(SG) Preparar comunicação da decisão inicial" name="Preparar comunicação"/>
        <transition to="Nó de Desvio - (SG) Fluxo básico geral" name="Nó de Desvio - (SG) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Secretaria - ANALISAR" name="Cumprir despacho"/>
    </task-node>
    <process-state name="(SG) Enviar para a Turma de Uniformização de Jurisprudência">
        <sub-process name="(TUJ) Fluxo básico geral" binding="late"/>
        <transition to="(SG) Processos devolvidos da TUJ" name="(SG) Processos devolvidos da TUJ"/>
    </process-state>
    <process-state name="(SG) Processos devolvidos da TUJ">
        <sub-process name="(SG) Processos devolvidos pela TUJ" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
