<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Decisão colegiada como não relator">
    <description><![CDATA[Código do fluxo: SG_DECCOLNREL.

Descrição: Fluxo destinado a preparação de decisões colegiadas como não relator do processo.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
Magistrado  Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('599:1469,600:5899,6:1469,5:5899')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (SG) Decisão colegiada como não relator">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('599:1469,600:5899,6:1469,5:5899')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(SG) Voto [não relator] - VOTAR" name="(SG) Voto [não relator] - VOTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Voto [não relator] - VOTAR">
        <task name="(SG) Voto [não relator] - VOTAR" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="Encaminhar para assessoria"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="Cancelar e sair da tarefa"/>
        <transition to="(SG) Redirecionar de acordo com a situacao" name="(SG) Redirecionar de acordo com a situacao">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:transicaoAutomatica:papeis')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sg:finalizarVotoVogal')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Redirecionar de acordo com a situacao')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:transicaoAutomatica:papeis','magistrado,pje:magistrado')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Cancelar e sair da tarefa, Encaminhar para assessoria')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('sg:finalizarVotoVogal', 'true')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - MINUTAR">
        <task name="(SG) Voto [não relator] - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(SG) Voto [não relator] - CONFIRMAR" name="Encaminhar para confirmação"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="Encaminhar para validação"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="Cancelar e sair da tarefa"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - CONFIRMAR">
        <task name="(SG) Voto [não relator] - CONFIRMAR" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="Retornar para elaboração da minuta"/>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="Encaminhar para validação"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - VALIDAR">
        <task name="(SG) Voto [não relator] - VALIDAR" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="Retornar para elaboração da minuta"/>
        <transition to="(SG) Redirecionar de acordo com a situacao" name="(SG) Redirecionar de acordo com a situacao">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:transicaoAutomatica:papeis')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Redirecionar de acordo com a situacao')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:transicaoAutomatica:papeis','magistrado,pje:magistrado')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
    </task-node>
    <decision expression="#{ not empty tramitacaoProcessualService.recuperaVariavel('sg:deccolrel:pedido_retirada_pauta') ? 'retiradoJulgamento' : (empty processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') ? 'situacao padrao' : processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao')) }" name="(SG) Redirecionar de acordo com a situacao">
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="adiado"/>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="pedidoVista"/>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="situacao padrao"/>
        <transition to="(SG) Gabinete do relator foi o vencendor?" name="julgado"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="retiradoJulgamento"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR">
        <task name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - VOTAR" name="Retornar para minuta do voto [não relator]"/>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="Retornar para validação do voto [não relator]"/>
        <transition to="(SG) Redirecionar de acordo com a situacao" name="(SG) Redirecionar de acordo com a situacao">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sg:finalizarVotoVogal')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Redirecionar de acordo com a situacao')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('sg:finalizarVotoVogal', 'true')}"/>
        </event>
    </task-node>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') and tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') != tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador ? '(SG) Apagar variáveis do fluxo' : '(SG) Existe conteúdo no voto?'}" name="(SG) Gabinete do relator foi o vencendor?">
        <transition to="(SG) Existe conteúdo no voto?" name="(SG) Existe conteúdo no voto?"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
    </decision>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:julgamento:id') and not empty sessaoProcessoDocumentoVotoManager.recuperarVoto(sessaoPautaProcessoTrfManager.findById(tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:julgamento:id')).sessao, tramitacaoProcessualService.recuperaProcesso(), orgaoJulgadorManager.getOrgaoJulgadorByLocalizacao(localizacaoManager.findById(processoInstanceManager.findById(processInstance.id).idLocalizacao)).idOrgaoJulgador).processoDocumento ? '(SG) Voto [não relator] - ASSINAR' : '(SG) Apagar variáveis do fluxo'}" name="(SG) Existe conteúdo no voto?">
        <transition to="(SG) Voto [não relator] - ASSINAR" name="(SG) Voto [não relator] - ASSINAR"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - ASSINAR">
        <task name="(SG) Voto [não relator] - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="Aguardar sessão de julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
    </task-node>
    <node name="(SG) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:orgaoVencedor:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:julgamento:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:deccolrel:pedido_retirada_pauta')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
        <task name="Nó de Desvio - (SG) Decisão colegiada como não relator" swimlane="Nó de Desvio - (SG) Decisão colegiada como não relator"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Voto [não relator] - VOTAR" name="(SG) Voto [não relator] - VOTAR"/>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="(SG) Voto [não relator] - MINUTAR"/>
        <transition to="(SG) Voto [não relator] - CONFIRMAR" name="(SG) Voto [não relator] - CONFIRMAR"/>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR"/>
        <transition to="(SG) Voto [não relator] - ASSINAR" name="(SG) Voto [não relator] - ASSINAR"/>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="(SG) Voto [não relator] - VALIDAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>