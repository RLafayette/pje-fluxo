<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Expedição de documentos">
    <description><![CDATA[Código do fluxo: SG_EXPDOC

Descrição: Fluxo responsável pela expedição de documentos.

Raia        Localização              Papel
Secretaria  Secretaria Segundo Grau  Chefe de Secretaria
Secretaria  Secretaria Segundo Grau  Servidor Geral
Magistrado  Assessoria Segundo Grau  Assessor
Magistrado  Assessoria Segundo Grau  Assessor Chefe
Magistrado  Assessoria Segundo Grau  Assessor para Votação Antecipada
Assessoria Segundo Grau  Assessor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907,5:5197,6:1469,5:5898,5:5899,5:5907')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (SG) Expedição de documentos">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483,602:5906,8:1338,8:5483,8:5906')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="(SG) Certidão de decurso de prazo?" name="(SG) Certidão de decurso de prazo?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:expdoc:certidao_decurso_prazo') == true ? '(SG) Certidão de decurso de prazo - EXPEDIR' : '(SG) Certidão de trânsito em julgado?'}" name="(SG) Certidão de decurso de prazo?">
        <transition to="Preparar para certificar decurso de prazo" name="(SG) Certidão de decurso de prazo - EXPEDIR"/>
        <transition to="(SG) Certidão de trânsito em julgado?" name="(SG) Certidão de trânsito em julgado?"/>
    </decision>
    <node name="Preparar para certificar decurso de prazo">
        <transition to="Disparar Fluxo Certificar decurso de prazo" name="Disparar Fluxo Certificar decurso de prazo"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo', true)}"/>
        </event>
    </node>
    <process-state name="Disparar Fluxo Certificar decurso de prazo">
        <sub-process name="Certidão Automática de Prazos Decorridos" binding="late"/>
        <transition to="(SG) Verificar pendência de cumprimentos" name="(SG) Verificar pendência de cumprimentos"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:nomePrefixoTipoFluxo','EF')}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:expdoc:certidao_transito_julgado') == true ? '(SG) Certidão de trânsito em julgado - EXPEDIR' : '(SG) É alvará?'}" name="(SG) Certidão de trânsito em julgado?">
        <transition to="(SG) Certidão de trânsito em julgado - EXPEDIR" name="(SG) Certidão de trânsito em julgado - EXPEDIR"/>
        <transition to="(SG) É alvará?" name="(SG) É alvará?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Certidão de trânsito em julgado - EXPEDIR">
        <task name="(SG) Certidão de trânsito em julgado - EXPEDIR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="minuta_certidao_transito_julgado" mapped-name="textEditCombo:minuta_certidao_transito_julgado" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_certidao_transito_julgado
   Label: Minuta em elaboração de certidão de trânsito em julgado
   Escrita: Sim
   Obrig.: Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote

*Eventos de tarefa*

1. Tipo de evento: Sair tarefa
   Agrupamento eventos: Trânsito em julgado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="Nó de Desvio - (SG) Expedição de documentos" name="Nó de Desvio - (SG) Expedição de documentos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Apagar minuta não assinada de trânsito em julgado" name="Cancelar e sair da tarefa"/>
        <transition to="(SG) Certidão de trânsito em julgado - ASSINAR" name=" Encaminhar para assinatura"/>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','70')}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_certidao_transito_julgado'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavelTarefa('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','70')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Certidão de trânsito em julgado - ASSINAR">
        <task name="(SG) Certidão de trânsito em julgado - ASSINAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Expedição de documentos" name="Nó de Desvio - (SG) Expedição de documentos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Certidão de trânsito em julgado - EXPEDIR" name="Retornar para minuta de certidão de trânsito em julgado"/>
        <transition to="(SG) Verificar pendência de cumprimentos" name="(SG) Verificar pendência de cumprimentos">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '70')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Verificar pendência de cumprimentos')}"/>
        </event>
    </task-node>
    <node name="(SG) Apagar minuta não assinada de trânsito em julgado">
        <transition to="(SG) Verificar pendência de cumprimentos" name="(SG) Verificar pendência de cumprimentos"/>
        <event type="node-enter">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minuta_certidao_transito_julgado')}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:expdoc:alvara') == true ? '(SG) Alvará - EXPEDIR' : '(SG) Verificar pendência de cumprimentos'}" name="(SG) É alvará?">
        <transition to="(SG) Alvará - EXPEDIR" name="(SG) Alvará - EXPEDIR"/>
        <transition to="(SG) Verificar pendência de cumprimentos" name="(SG) Verificar pendência de cumprimentos"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Alvará - EXPEDIR">
        <task name="(SG) Alvará - EXPEDIR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="minuta_alvara" mapped-name="textEditCombo:minuta_alvara" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_alvara
   Label: Minuta em elaboração de alvará
   Escrita: Sim
   Obrig.: Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Expedição de documentos" name="Nó de Desvio - (SG) Expedição de documentos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Alvará - ASSINAR" name="Encaminhar para assinatura"/>
        <transition to="(SG) Apagar minuta não assinada de alvará" name="Cancelar e sair da tarefa"/>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','91')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_alvara'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '91')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Alvará - ASSINAR">
        <task name="(SG) Alvará - ASSINAR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Expedição de documentos" name="Nó de Desvio - (SG) Expedição de documentos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Alvará - EXPEDIR" name="Retornar para minuta de alvará"/>
        <transition to="(SG) Lançar movimento de expedição de alvará" name="(SG) Lançar movimento de expedição de alvará">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '91')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Lançar movimento de expedição de alvará')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('condicaoLancamentoMovimentosTemporario', '${true}')}"/>
        </event>
    </task-node>
    <node name="(SG) Apagar minuta não assinada de alvará">
        <transition to="(SG) Verificar pendência de cumprimentos" name="(SG) Verificar pendência de cumprimentos"/>
        <event type="node-enter">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minuta_alvara')}"/>
        </event>
    </node>
    <node name="(SG) Lançar movimento de expedição de alvará">
        <transition to="(SG) Verificar pendência de cumprimentos" name="(SG) Verificar pendência de cumprimentos"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).associarAoDocumento(documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(73).lancarMovimento()}"/>
        </event>
    </node>
    <process-state name="(SG) Verificar pendência de cumprimentos">
        <sub-process name="(SG) Sinalizar verificação de cumprimentos" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{org.jboss.seam.bpm.processInstance.contextInstance.deleteVariable('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minuta_certidao_decurso_prazo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minuta_certidao_transito_julgado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action expression="#{lancadorMovimentosService.apagarMovimentosTemporarios()}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Expedição de documentos">
        <task name="Nó de Desvio - (SG) Expedição de documentos" swimlane="Nó de Desvio - (SG) Expedição de documentos" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Certidão de trânsito em julgado - EXPEDIR" name="(SG) Certidão de trânsito em julgado - EXPEDIR"/>
        <transition to="(SG) Certidão de trânsito em julgado - ASSINAR" name="(SG) Certidão de trânsito em julgado - ASSINAR"/>
        <transition to="(SG) Alvará - EXPEDIR" name="(SG) Alvará - EXPEDIR"/>
        <transition to="(SG) Alvará - ASSINAR" name="(SG) Alvará - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>