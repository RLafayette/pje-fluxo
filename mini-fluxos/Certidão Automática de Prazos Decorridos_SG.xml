<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Certidão Automática de Prazos Decorridos">
    <description><![CDATA[Código: MINI_CERT_AUTO_PRAZ_DECO
        Nome: Certidão Automática de Prazos Decorridos
        Descrição: Mini Fluxo para certidão automática de prazos decorridos

        ----------------------------------------------------------
        Variáveis a serem configuradas na tabela de parâmetros:

        - idTipoDocumentoIntimacao - id do tipo de documento 'intimação'
        - idTipoDocumentoCertidaoDecursoPrazo - id do tipo de documento 'certidão de decurso de prazo'
        - idModeloCertidaoDecursoPrazoAcordaoDecisao - o id do modelo de documento para 'certidão automática de decurso de prazo' para os casos dos expedientes que foram originados a partir de acórdão/decisão
                - idModeloCertidaoDecursoPrazoOutros - o id do modelo de documento para 'certidão automática de decurso de prazo' para os casos dos expedientes que foram NÃO originados a partir de acórdão/decisão

        ----------------------------------------------------------
        Regra negocial
        - O sistema deve juntar uma certidão automática de prazo decorrido se houver uma intimação nos autos (juntada de expediente do tipo intimação) e, desde a juntada da intimação, nenhum documento foi juntado aos autos.
        - Em qualquer outro cenário o sistema se comporta como já ocorre hoje (deixa o processo na tarefa 'processos com prazo decorrido'), para o servidor da Vara fazer a análise.

        ----------------------------------------------------------
        Intervenções:
        - Associar o papel SISTEMA ao tipo de documento "Certidão de decurso de prazo", com exigibilidade Suficiente
        - Criar um modelo de certidão automática de decurso de prazo (id 72124)
        - Criar parâmetro do tipo de documento (&#145;idTipoDocumentoCertidaoDecursoPrazo&#146;)
        - Criar parâmetro do modelo de documento para acórdão/decisão (&#145;idModeloCertidaoDecursoPrazoAcordaoDecisao&#146;)
        - Criar parâmetro do modelo de documento para outros tipos de intimação (&#145;idModeloCertidaoDecursoPrazoOutros&#146;)
        - Criar parâmetro do tipo de documento de intimação (&#145;idTipoDocumentoIntimacao&#146;)
        - Modificar o fluxo para certificar de forma automática o decurso

        ----------------------------------------------------------
        Como chamar o fluxo, variáveis que devem(podem) ser definidas ao iniciar o fluxo:
        - pje:fluxo:nomePrefixoTipoFluxo (opcional): deve definir o tipo de fluxo que será exibido nos nós de tarefa do Fluxo. Exemplo: EF, ou VCiv, ou CEJUSC
        - tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo (opcional): se contiver valor será validado se o processo houve manifestação ou não]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483,602:5906,8:1338,8:5483,8:5906')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition to="Recuperar última intimação" name="Recuperar última intimação"/>
    </start-state>  
    <!-- NODES -->
    <node name="Recuperar última intimação">
        <description><![CDATA[Produz as variáveis de fluxo 'tjrn:fluxo:mini:capd:houveManifestacao' e 'tjrn:fluxo:mini:capd:ultimaIntimacao'.]]></description>
        <transition to="Certifica sem validar?" name="Certifica sem validar?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao', entityManager.createNativeQuery(&quot;select cast(tppe.id_processo_parte_expediente as integer) from tb_proc_parte_expediente tppe where id_processo_trf = :idProcesso and id_processo_expediente in (select distinct on (id_processo_trf) id_processo_expediente from tb_processo_expediente tpe where cast(id_tipo_processo_documento as varchar) = :idTipoDocumentoIntimacao and tpe.id_processo_trf = tppe.id_processo_trf order by id_processo_trf , id_processo_expediente desc) limit 1 &quot;).setParameter('idProcesso',tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf()).setParameter('idTipoDocumentoIntimacao',parametroService.valueOf('idTipoDocumentoIntimacao')).getSingleResult())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:houveManifestacao', processoDocumentoManager.recuperaDocumentosJuntados(tramitacaoProcessualService.recuperaProcesso(), tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')!= null ? processoParteExpedienteManager.findById(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')).getProcessoExpediente().getProcessoDocumento().getDataJuntada() : dateUtil.getDataAtual()).size() &gt; 1)}"/>
        </event>
    </node>
    <decision expression="#{empty tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo') ? 'Sim' : 'Não'}" name="Certifica sem validar?">
        <description><![CDATA[Valida se deve validar ou não a certidão de decurso de prazo]]></description>
        <transition to="Houve alguma manifestação?" name="Não"/>
        <transition to="Recuperar dados a serem exibidos na certidão" name="Sim"/>
    </decision>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')==null || tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:houveManifestacao') ? 'Sim' : 'Não'}" name="Houve alguma manifestação?">
        <description><![CDATA[Verifica se se a ultima intimação é o ultimo documento ou se houve alguma outra manifestação.]]></description>
        <transition to="Processos com prazos decorridos não certificados automaticamente - ANALISAR" name="Sim"/>
        <transition to="Recuperar dados a serem exibidos na certidão" name="Não"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:houveManifestacao')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="Processos com prazos decorridos não certificados automaticamente - ANALISAR">
        <task name="Processos com prazos decorridos não certificados automaticamente - ANALISAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis de Tarefa*
- Nome: aviso1
- Tipo: Aviso
- Label: Existe Manifestação para o Expediente. Com isso não foi gerado o certificado de decurso de prazo. 
- Escrita: Sim
- Obrigatório: Não]]></description>
        <transition to="Término" name="Finalizar e sair da Tarefa"/>
        <transition to="Nó de Desvio - Certidão Automática de Prazos Decorridos" name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Apagar variável de validação" name="Forçar gerar Certidão de Decurso de Prazo"/>
        <event type="task-create">
            <action name="upd" expression="#{empty parametroService.valueOf('pje:fluxo:nomePrefixoTipoFluxo') ? '' : taskInstance.setName(parametroService.valueOf('pje:fluxo:nomePrefixoTipoFluxo').concat(' Processos com prazos decorridos não certificados automaticamente - ANALISAR'))}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <node name="Recuperar dados a serem exibidos na certidão">
        <description><![CDATA[Tarefa que consulta dados a serem utilizados no documento modelo da certidão automática de decurso de prazo armazenada nas variáveis:

+tjrn:fluxo:mini:capd:idDocumentoVinculadoUltimaIntimacao
+tjrn:fluxo:mini:capd:nomeDocumentoVinculadoUltimaIntimacao
+tjrn:fluxo:mini:capd:nomeParteUltimaIntimacao]]></description>
        <transition to="Qual o tipo de certificado?" name="Qual o tipo de certificado?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:idParteUltimaIntimacao', processoParteExpedienteManager.findById(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')).getPessoaParte().getIdPessoa())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:nomeDocumentoVinculadoUltimaIntimacao', processoParteExpedienteManager.findById(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')).getProcessoExpediente().getProcessoDocumentoVinculadoExpediente().getProcessoDocumento())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:idDocumentoVinculadoUltimaIntimacao', processoParteExpedienteManager.findById(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')).getProcessoExpediente().getProcessoDocumentoVinculadoExpediente().getIdProcessoDocumento())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:dataCienciaUltimaIntimacao', processoParteExpedienteManager.findById(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')).getDtCienciaParte())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:tipoParteUltimaIntimacao', entityManager.createQuery('select processoParte from ProcessoParte processoParte where processoParte.pessoa.id =:idPessoa and processoParte.processoTrf.id = :idProcesso').setParameter('idPessoa', tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:idParteUltimaIntimacao')).setParameter('idProcesso', tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf()).getSingleResult().getTipoParte().getTipoParte() )}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:tipoParteUltimaIntimacao') eq 'ADVOGADO'? tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:tipoParteUltimaIntimacao', entityManager.createNativeQuery('select tp.ds_tipo_parte from client.tb_processo_parte pp join client.tb_proc_parte_represntante ppr on pp.id_processo_parte = ppr.id_processo_parte join client.tb_tipo_parte tp on pp.id_tipo_parte = tp.id_tipo_parte where id_processo_trf = :idProcesso and ppr.id_representante = :idPessoa limit 1').setParameter('idPessoa', tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:idParteUltimaIntimacao')).setParameter('idProcesso', tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf()).getSingleResult()) : ''}"/>
        </event>
    </node>
    <decision expression="#{empty tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:idDocumentoVinculadoUltimaIntimacao') ? 'Certidão automática de prazo decorrido demais casos' : 'Certidão automática de prazo decorrido para decisao_acórdão'}" name="Qual o tipo de certificado?">
        <transition to="Certidão automática de prazo decorrido demais casos" name="Certidão automática de prazo decorrido demais casos"/>
        <transition to="Certidão automática de prazo decorrido para decisao_acórdão" name="Certidão automática de prazo decorrido para decisao_acórdão"/>
    </decision>
    <node name="Certidão automática de prazo decorrido para decisao_acórdão">
        <transition to="Processos com prazos decorridos certificados automaticamente" name="Processos com prazos decorridos certificados automaticamente"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:idMinuta')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:idMinuta', documentoJudicialService.gerarMinuta(tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf(), 0, taskInstance.id, parametroService.valueOf('idTipoDocumentoCertidaoDecursoPrazo'), parametroService.valueOf('idModeloCertidaoDecursoPrazoAcordaoDecisao')))}"/>
            <action expression="#{preencherMovimento.deCodigo(60).associarAoDocumentoDeId(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta')).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(107).lancarMovimentoTemporariamente(processInstance)}"/>
            <action expression="#{documentoJudicialService.juntarDocumento(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta'), taskInstance.id,processInstance.id)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:atoProferido', documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta')).getIdProcessoDocumento())}"/>
        </event>
    </node>
    <node name="Certidão automática de prazo decorrido demais casos">
        <transition to="Processos com prazos decorridos certificados automaticamente" name="Processos com prazos decorridos certificados automaticamente"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:idMinuta')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:idMinuta', documentoJudicialService.gerarMinuta(tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf(), 0, taskInstance.id, parametroService.valueOf('idTipoDocumentoCertidaoDecursoPrazo'), parametroService.valueOf('idModeloCertidaoDecursoPrazoOutros')))}"/>
            <action expression="#{preencherMovimento.deCodigo(60).associarAoDocumentoDeId(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta')).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(107).lancarMovimentoTemporariamente(processInstance)}"/>
            <action expression="#{documentoJudicialService.juntarDocumento(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta'), taskInstance.id,processInstance.id)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:atoProferido', documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta')).getIdProcessoDocumento())}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Processos com prazos decorridos certificados automaticamente">
        <task name="Processos com prazos decorridos certificados automaticamente" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Visualizar a certidão de decurso de prazo gerada automaticamente]]></description>
        <transition to="Nó de Desvio - Certidão Automática de Prazos Decorridos" name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <event type="task-create">
            <action name="upd" expression="#{empty parametroService.valueOf('pje:fluxo:nomePrefixoTipoFluxo') ? '' : taskInstance.setName(parametroService.valueOf('pje:fluxo:nomePrefixoTipoFluxo').concat(' Processos com prazos decorridos certificados automaticamente'))}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:idParteUltimaIntimacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:tipoParteUltimaIntimacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:nomeDocumentoVinculadoUltimaIntimacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:idDocumentoVinculadoUltimaIntimacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:dataCienciaUltimaIntimacao')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
        <task name="Nó de Desvio - Certidão Automática de Prazos Decorridos" swimlane="Nó de Desvio - Certidão Automática de Prazos Decorridos" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="Processos com prazos decorridos certificados automaticamente" name="Processos com prazos decorridos certificados automaticamente"/>
        <transition to="Processos com prazos decorridos não certificados automaticamente - ANALISAR" name="Processos com prazos decorridos não certificados automaticamente - ANALISAR"/>
    </task-node>
    <node name="Apagar variável de validação">
        <transition to="Recuperar última intimação" name="Recuperar última intimação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo')}"/>
        </event>
    </node>
    <end-state name="Término"/>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>