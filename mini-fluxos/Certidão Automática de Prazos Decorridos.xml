<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Certidão Automática de Prazos Decorridos">
    <description><![CDATA[Código: MINI_CERT_AUTO_PRAZ_DECO
        Nome: Certidão Automática de Prazos Decorridos
        Descrição: Mini Fluxo para certidão automática de prazos decorridos.

        ----------------------------------------------------------
        Variáveis a serem configuradas na tabela de parâmetros:

        - idTipoDocumentoIntimacao - id do tipo de documento 'intimação'
        - idTipoDocumentoCertidaoDecursoPrazo - id do tipo de documento 'certidão de decurso de prazo'
        - idModeloCertidaoDecursoPrazo - o id do modelo de documento para 'certidão automática de decurso de prazo'


        ----------------------------------------------------------
        Regra negocial
        - O sistema deve juntar uma certidão automática de prazo decorrido se houver uma intimação nos autos (juntada de expediente do tipo intimação) e, desde a juntada da intimação, nenhum documento foi juntado aos autos.
        - Em qualquer outro cenário o sistema se comporta como já ocorre hoje (deixa o processo na tarefa 'processos com prazo decorrido'), para o servidor da Vara fazer a análise.

        Intervenções:
        - Associar o papel SISTEMA ao tipo de documento "Certidão de decurso de prazo", com exigibilidade Suficiente
        - Criar um modelo de certidão automática de decurso de prazo (id 72124)
        - Criar parâmetro do tipo de documento (‘idTipoDocumentoCertidaoDecursoPrazo’)
        - Criar parâmetro do modelo de documento (‘idModeloCertidaoDecursoPrazo’)
        - Criar parâmetro do tipo de documento de intimação (‘idTipoDocumentoIntimacao’)
        - Modificar o fluxo para certificar de forma automática o decurso


        ]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:1338,1342:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="Processos com prazos decorridos" name="Processos com prazos decorridos"/>
    </start-state>  
    <!-- NODES -->
   <task-node end-tasks="true" name="Processos com prazos decorridos">
        <task name="Processos com prazos decorridos" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Apagar variável de validação" name="Gerar automaticamente certidão de decurso de prazo"/>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="Nó de Desvio - Certidão Automática de Prazos Decorridos" name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{empty tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:idTipoFluxo') ? '' : taskInstance.setName(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:idTipoFluxo').concat(' Processos com prazos decorridos') )}"/>
        </event>
    </task-node>
     <!--   -->
    <node name="Apagar variável de validação">
        <transition to="Recuperar última intimação" name="Recuperar última intimação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo')}"/>
        </event>
    </node>
    <node name="Recuperar última intimação">
        <description><![CDATA[Produz as variáveis de fluxo 'tjrn:fluxo:mini:capd:houveManifestacao' e 'tjrn:fluxo:mini:capd:ultimaIntimacao'.]]></description>
        <transition to="Certifica sem validar?" name="Certifica sem validar?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:expedientesProcesso')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tjrn:fluxo:mini:capd:ultimaIntimacao', processoDocumentoManager.findById(entityManager.createNativeQuery(&quot;select tppe.id_processo_parte_expediente from tb_proc_parte_expediente tppe where id_processo_trf = :idProcesso and id_processo_expediente in (select distinct on (id_processo_trf) id_processo_expediente from tb_processo_expediente tpe where id_tipo_processo_documento = :idTipoDocumentoIntimacao and tpe.id_processo_trf = tppe.id_processo_trf order by id_processo_trf , id_processo_expediente desc)&quot;).setParameter('idProcesso',tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf()).setParameter('idTipoDocumentoIntimacao',parametroService.valueOf('idTipoDocumentoIntimacao')).getSingleResult())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:mini:capd:houveManifestacao', processoDocumentoManager.recuperaDocumentosJuntados(tramitacaoProcessualService.recuperaProcesso(), tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')!=null ? tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao').getProcessoExpediente().getProcessoDocumento().getDataJuntada() : dateUtil.getDataAtual()).size()&gt;0)}"/>
        </event>
    </node>
    <decision expression="#{empty tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo') ? 'Sim' : 'Não'}" name="Certifica sem validar?">
        <transition to="Certidão automática de prazo decorrido" name="Sim"/>
        <transition to="Houve alguma manifestação?" name="Não"/>
    </decision>

    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')==null || tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:mini:capd:houveManifestacao') ? 'Sim' : 'Não'}" name="Houve alguma manifestação?">
        <description><![CDATA[Valida se houve uma intimação nos autos e nenhuma manifestação para encaminhar para certificar automaticamente o decurso de prazo.]]></description>
        <transition to="Processos com prazos decorridos" name="Sim"/>
        <transition to="Certidão automática de prazo decorrido" name="Não"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:houveManifestacao')}"/>
        </event>
    </decision>
    <node name="Certidão automática de prazo decorrido">
        <description><![CDATA[Junta certidão automática de ausência de manifestação das partes dentro do prazo.]]></description>
        <transition to="Processos com prazos decorridos certificados automaticamente" name="Processos com prazos decorridos certificados automaticamente"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:idMinuta')}"/>
            <!--<action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:ultimaIntimacao')}"/>-->
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tjrn:fluxo:mini:capd:validarCertidaoDecursoPrazo')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tjrn:fluxo:idMinuta', documentoJudicialService.gerarMinuta(tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf(), 0, taskInstance.id, parametroService.valueOf('idTipoDocumentoCertidaoDecursoPrazo'), parametroService.valueOf('idModeloCertidaoDecursoPrazo')))}"/>
            <action expression="#{preencherMovimento.deCodigo(60).associarAoDocumentoDeId(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta')).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(107).lancarMovimentoTemporariamente(processInstance)}"/>
            <action expression="#{documentoJudicialService.juntarDocumento(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta'), taskInstance.id,processInstance.id)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:atoProferido', documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('tjrn:fluxo:idMinuta')).getIdProcessoDocumento())}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="Processos com prazos decorridos certificados automaticamente">
        <task name="Processos com prazos decorridos certificados automaticamente" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle de prazos e retorno de expedientes" name="Nó de Desvio - (VCiv) Controle de prazos e retorno de expedientes">
            <condition expression="#{true}"/>
        </transition>
    </task-node>

    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - Certidão Automática de Prazos Decorridos">
        <task name="Nó de Desvio - Certidão Automática de Prazos Decorridos" swimlane="Nó de Desvio - Certidão Automática de Prazos Decorridos" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="Processos com prazos decorridos" name="Processos com prazos decorridos"/>
        <transition to="Processos com prazos decorridos certificados automaticamente" name="Processos com prazos decorridos certificados automaticamente"/>
        
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
